import { supabase } from './supabase.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –∏ —Ç–µ–≥–∞–º–∏
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID, DRY, KISS
 */

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏ –∏–∑ Google Sheets
 * SOLID: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
 */
export async function syncVacanciesWithTagsFromSheets(sheetsData) {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏...');
    
    const vacancies = sheetsData.map((row, index) => {
      // –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–≥–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ J)
      const tagsString = row[9] || ''; // –ö–æ–ª–æ–Ω–∫–∞ J —Å —Ç–µ–≥–∞–º–∏
      const tags = tagsString ? tagsString.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
      
      return {
        title: row[0] || '',
        description: row[1] || '',
        emoji: row[2] || 'üíº',
        category: row[3] || '–û–±—â–µ–µ',
        link: row[4] || '',
        level: row[5] || '',
        salary: row[6] || '',
        requirements: row[7] || '',
        benefits: row[8] || '',
        tags: tags,
        salary_min: this.parseSalary(row[6], 'min'),
        salary_max: this.parseSalary(row[6], 'max'),
        work_type: this.detectWorkType(row[1] + ' ' + row[7]), // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        experience_level: this.detectExperienceLevel(row[5]),
        location: this.detectLocation(row[1] + ' ' + row[7]),
        is_active: true
      };
    }).filter(v => v.title); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏`);
    
    if (vacancies.length === 0) {
      return { success: true, synced: 0, updated: 0 };
    }
    
    let syncedCount = 0;
    let updatedCount = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const { data: existingVacancies, error: fetchError } = await supabase
      .from('vacancies')
      .select('id, title, category, tags');
    
    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π:', fetchError);
      return { success: false, error: fetchError.message };
    }
    
    const existingMap = new Map();
    existingVacancies.forEach(vacancy => {
      const key = `${vacancy.title}_${vacancy.category}`;
      existingMap.set(key, vacancy);
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    for (const vacancy of vacancies) {
      const key = `${vacancy.title}_${vacancy.category}`;
      
      if (existingMap.has(key)) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        const existingVacancy = existingMap.get(key);
        const { error: updateError } = await supabase
          .from('vacancies')
          .update(vacancy)
          .eq('id', existingVacancy.id);
        
        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.title}:`, updateError);
        } else {
          updatedCount++;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
          await this.updateVacancyTags(existingVacancy.id, vacancy.tags);
        }
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        const { data: newVacancy, error: insertError } = await supabase
          .from('vacancies')
          .insert([vacancy])
          .select()
          .single();
        
        if (insertError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.title}:`, insertError);
        } else {
          syncedCount++;
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title}`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
          await this.updateVacancyTags(newVacancy.id, vacancy.tags);
        }
      }
    }
    
    console.log(`üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö`);
    return { success: true, synced: syncedCount, updated: updatedCount };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–∏
 * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç tag_name –≤–º–µ—Å—Ç–æ tag_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å simple-new-tables.sql
 */
async function updateVacancyTags(vacancyId, tags) {
  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ–≥–∏
    await supabase
      .from('vacancy_tags')
      .delete()
      .eq('vacancy_id', vacancyId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
    if (tags && tags.length > 0) {
      const tagRecords = tags.map(tagName => ({
        vacancy_id: vacancyId,
        tag_name: tagName,
        relevance_score: 1
      }));
      
      const { error } = await supabase
        .from('vacancy_tags')
        .insert(tagRecords);

      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–≥–æ–≤:`, error);
        return;
      }

      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–µ–≥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
      await ensureTagsExistInDirectory(tags);
    }
    
    console.log(`   ‚úÖ –¢–µ–≥–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${tags.join(', ')}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancyId}:`, error);
  }
}

/**
 * –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ–≥–∏ –µ—Å—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ tags
 */
async function ensureTagsExistInDirectory(tagNames) {
  try {
    for (const tagName of tagNames) {
      const { data: existing } = await supabase
        .from('tags')
        .select('name')
        .eq('name', tagName)
        .maybeSingle();

      if (!existing) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–≥
        const category = detectTagCategory(tagName);
        
        await supabase
          .from('tags')
          .insert({
            name: tagName,
            category: category,
            description: `–¢–µ–≥ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏: ${tagName}`,
            is_active: true
          });
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–≥–∞
 */
function detectTagCategory(tagName) {
  const lowerTag = tagName.toLowerCase();
  
  // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
  if (lowerTag.match(/(react|vue|angular|node|python|java|php|go|rust|typescript|javascript)/)) {
    return 'technology';
  }
  
  // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  if (lowerTag.match(/(frontend|backend|fullstack|mobile|devops|qa|design|marketing)/)) {
    return 'direction';
  }
  
  // –û–ø—ã—Ç
  if (lowerTag.match(/(junior|middle|senior|lead|–±–µ–∑ –æ–ø—ã—Ç–∞|–≥–æ–¥–∞|–ª–µ—Ç)/)) {
    return 'experience';
  }
  
  // –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
  if (lowerTag.match(/(–æ—Ñ–∏—Å|—É–¥–∞–ª—ë–Ω–∫–∞|–≥–∏–±—Ä–∏–¥|—É–¥–∞–ª–µ–Ω–Ω–æ)/)) {
    return 'work_type';
  }
  
  return 'other';
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
 * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
function parseSalary(salaryString, type) {
  if (!salaryString) return null;
  
  // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
  const numbers = salaryString.match(/\d+/g);
  if (!numbers || numbers.length === 0) return null;
  
  const nums = numbers.map(n => parseInt(n));
  
  if (type === 'min') {
    return Math.min(...nums);
  } else if (type === 'max') {
    return Math.max(...nums);
  }
  
  return null;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
 * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
 */
function detectWorkType(text) {
  const lowerText = text.toLowerCase();
  
  if (lowerText.includes('—É–¥–∞–ª–µ–Ω') || lowerText.includes('remote')) {
    return '–£–¥–∞–ª–µ–Ω–∫–∞';
  } else if (lowerText.includes('–æ—Ñ–∏—Å') || lowerText.includes('office')) {
    return '–û—Ñ–∏—Å';
  } else if (lowerText.includes('–≥–∏–±—Ä–∏–¥') || lowerText.includes('hybrid')) {
    return '–ì–∏–±—Ä–∏–¥';
  }
  
  return '–õ—é–±–æ–π'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞
 * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
 */
function detectExperienceLevel(levelString) {
  if (!levelString) return '–õ—é–±–æ–π';
  
  const lowerLevel = levelString.toLowerCase();
  
  if (lowerLevel.includes('junior') || lowerLevel.includes('–º–ª–∞–¥—à–∏–π')) {
    return 'Junior';
  } else if (lowerLevel.includes('middle') || lowerLevel.includes('—Å—Ä–µ–¥–Ω–∏–π')) {
    return 'Middle';
  } else if (lowerLevel.includes('senior') || lowerLevel.includes('—Å—Ç–∞—Ä—à–∏–π')) {
    return 'Senior';
  } else if (lowerLevel.includes('lead') || lowerLevel.includes('–ª–∏–¥')) {
    return 'Lead';
  }
  
  return '–õ—é–±–æ–π';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
 * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
 */
function detectLocation(text) {
  const lowerText = text.toLowerCase();
  
  // –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const cities = [
    '–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    '–∫–∞–∑–∞–Ω—å', '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '—á–µ–ª—è–±–∏–Ω—Å–∫', '—Å–∞–º–∞—Ä–∞',
    '–æ–º—Å–∫', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '—É—Ñ–∞', '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
  ];
  
  for (const city of cities) {
    if (lowerText.includes(city)) {
      return city.charAt(0).toUpperCase() + city.slice(1);
    }
  }
  
  return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏
 * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞
 */
export async function getVacanciesWithTags() {
  try {
    const { data, error } = await supabase
      .from('vacancies')
      .select(`
        *,
        vacancy_tags (
          tags (
            name,
            category
          ),
          relevance_score
        )
      `)
      .eq('is_active', true)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏:', error);
      return [];
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏:', error);
    return [];
  }
}

/**
 * –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ç–µ–≥–∞–º
 * SOLID: –û—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
 */
export async function findVacanciesByTags(tags, limit = 10) {
  try {
    const { data, error } = await supabase
      .from('vacancies')
      .select(`
        *,
        vacancy_tags (
          tags (
            name,
            category
          ),
          relevance_score
        )
      `)
      .eq('is_active', true)
      .overlaps('tags', tags)
      .order('created_at', { ascending: false })
      .limit(limit);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ç–µ–≥–∞–º:', error);
      return [];
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ç–µ–≥–∞–º:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
 * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞
 */
export async function getAllTags() {
  try {
    const { data, error } = await supabase
      .from('tags')
      .select('*')
      .eq('is_active', true)
      .order('name');
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error);
      return [];
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error);
    return [];
  }
}
