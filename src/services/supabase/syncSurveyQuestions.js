import { google } from 'googleapis';
import { upsertCategory, upsertField } from './supabaseSurveyQuestions.js';

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–ø—Ä–æ—Å–∞ –∏–∑ Google Sheets –≤ Supabase
 * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
const auth = new google.auth.JWT(
    process.env.GOOGLE_SERVICE_EMAIL,
    null,
    process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
    ['https://www.googleapis.com/auth/spreadsheets']
);

const sheetsService = google.sheets({ version: 'v4', auth });
const QUESTIONS_SHEET_ID = process.env.GOOGLE_QUESTIONS_SHEET_ID || process.env.GOOGLE_SHEET_ID;

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Google Sheets
 * –õ–∏—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏": category_key | name | description | icon | display_order | is_active
 */
export async function syncCategories() {
    try {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Google Sheets...');

        const response = await sheetsService.spreadsheets.values.get({
            spreadsheetId: QUESTIONS_SHEET_ID,
            range: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏!A:F'
        });

        const rows = response.data.values || [];

        if (rows.length <= 1) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"');
            return { success: true, synced: 0 };
        }

        let syncedCount = 0;

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for (const row of rows.slice(1)) {
            if (!row[0]) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

            const categoryData = {
                category_key: row[0]?.trim(),
                name: row[1]?.trim() || row[0],
                description: row[2]?.trim() || '',
                icon: row[3]?.trim() || 'üìã',
                display_order: parseInt(row[4]) || 0,
                is_active: row[5]?.toLowerCase() !== 'false'
            };

            const result = await upsertCategory(categoryData);
            if (result) {
                syncedCount++;
                console.log(`  ‚úÖ ${categoryData.name}`);
            }
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncedCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        return { success: true, synced: syncedCount };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏–∑ Google Sheets
 * –õ–∏—Å—Ç "–ü–æ–ª—è": category_key | field_key | field_type | label | placeholder | options | is_required | is_common | display_order
 */
export async function syncFields() {
    try {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏–∑ Google Sheets...');

        const response = await sheetsService.spreadsheets.values.get({
            spreadsheetId: QUESTIONS_SHEET_ID,
            range: '–ü–æ–ª—è!A:I'
        });

        const rows = response.data.values || [];

        if (rows.length <= 1) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–µ "–ü–æ–ª—è"');
            return { success: true, synced: 0 };
        }

        let syncedCount = 0;

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for (const row of rows.slice(1)) {
            if (!row[1]) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ field_key

            // –ü–∞—Ä—Å–∏–º –æ–ø—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ JSON
            let options = null;
            if (row[5]) {
                try {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: "–û–ø—Ü–∏—è 1, –û–ø—Ü–∏—è 2, –û–ø—Ü–∏—è 3"
                    if (row[5].includes(',')) {
                        options = row[5].split(',').map(opt => opt.trim()).filter(opt => opt);
                    } else {
                        // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ JSON
                        options = JSON.parse(row[5]);
                    }
                } catch (e) {
                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è ${row[1]}: ${row[5]}`);
                }
            }

            const fieldData = {
                category_key: row[0]?.trim() || null, // NULL = –æ–±—â–µ–µ –ø–æ–ª–µ
                field_key: row[1]?.trim(),
                field_type: row[2]?.trim() || 'string',
                label: row[3]?.trim() || row[1],
                placeholder: row[4]?.trim() || null,
                options: options,
                is_required: row[6]?.toLowerCase() === 'true',
                is_common: row[7]?.toLowerCase() === 'true',
                display_order: parseInt(row[8]) || 0
            };

            const result = await upsertField(fieldData);
            if (result) {
                syncedCount++;
                const category = fieldData.category_key || '–æ–±—â–µ–µ';
                console.log(`  ‚úÖ [${category}] ${fieldData.label}`);
            }
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncedCount} –ø–æ–ª–µ–π`);
        return { success: true, synced: syncedCount };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
 */
export async function syncSurveyQuestions() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–ø—Ä–æ—Å–∞...\n');

        // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoriesResult = await syncCategories();

        // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
        const fieldsResult = await syncFields();

        console.log('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
        console.log(`  - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesResult.synced} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
        console.log(`  - –ü–æ–ª—è: ${fieldsResult.synced} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);

        return {
            success: true,
            categories: categoriesResult,
            fields: fieldsResult
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        return { success: false, error: error.message };
    }
}

