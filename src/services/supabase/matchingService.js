import { supabase } from './supabase.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–±–æ—Ç–∞–µ—Ç —Å tag_name (VARCHAR) –≤–º–µ—Å—Ç–æ tag_id (UUID)
 * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö JOIN
 */

/**
 * –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
 */
export async function findMatchingVacancies(userId) {
    try {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);

        // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: userTags, error: userTagsError } = await supabase
            .from('user_tags')
            .select('tag_name')
            .eq('user_id', userId);

        if (userTagsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userTagsError);
            return [];
        }

        if (!userTags || userTags.length === 0) {
            console.log('   ‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–µ–≥–æ–≤');
            return [];
        }

        const userTagNames = userTags.map(t => t.tag_name);
        console.log(`   –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userTagNames.join(', ')}`);

        // 2. –ü–æ–ª—É—á–∞–µ–º ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        const { data: sentNotifications } = await supabase
            .from('notifications')
            .select('vacancy_id')
            .eq('user_id', userId);

        const sentVacancyIds = sentNotifications ? sentNotifications.map(n => n.vacancy_id) : [];

        // 3. –ù–∞—Ö–æ–¥–∏–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏
        const { data: matchingVacancyTags, error: matchError } = await supabase
            .from('vacancy_tags')
            .select('vacancy_id, tag_name')
            .in('tag_name', userTagNames);

        if (matchError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:', matchError);
            return [];
        }

        if (!matchingVacancyTags || matchingVacancyTags.length === 0) {
            console.log('   üì≠ –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —Ç–µ–≥–∞–º–∏');
            return [];
        }

        // 4. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ vacancy_id –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        const vacancyScores = {};
        
        matchingVacancyTags.forEach(vt => {
            if (!vacancyScores[vt.vacancy_id]) {
                vacancyScores[vt.vacancy_id] = {
                    id: vt.vacancy_id,
                    matchCount: 0,
                    matchedTags: []
                };
            }
            vacancyScores[vt.vacancy_id].matchCount++;
            vacancyScores[vt.vacancy_id].matchedTags.push(vt.tag_name);
        });

        // 5. –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ (–º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ)
        const vacancyIds = Object.entries(vacancyScores)
            .filter(([id, score]) => score.matchCount >= 2 && !sentVacancyIds.includes(id))
            .sort(([, a], [, b]) => b.matchCount - a.matchCount) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            .slice(0, 5) // –¢–æ–ø 5 –≤–∞–∫–∞–Ω—Å–∏–π
            .map(([id]) => id);

        if (vacancyIds.length === 0) {
            console.log('   üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π');
            return [];
        }

        // 6. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–π
        const { data: vacancies, error: vacError } = await supabase
            .from('vacancies')
            .select('*')
            .in('id', vacancyIds)
            .eq('is_active', true);

        if (vacError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π:', vacError);
            return [];
        }

        // 7. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
        const enrichedVacancies = vacancies.map(v => ({
            ...v,
            matchCount: vacancyScores[v.id].matchCount,
            matchedTags: vacancyScores[v.id].matchedTags
        }));

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        enrichedVacancies.sort((a, b) => b.matchCount - a.matchCount);

        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${enrichedVacancies.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
        enrichedVacancies.forEach(v => {
            console.log(`      ‚Ä¢ ${v.title} (${v.matchCount} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${v.matchedTags.join(', ')})`);
        });

        return enrichedVacancies;

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
 */
export async function getUserTags(userId) {
    try {
        const { data, error } = await supabase
            .from('user_tags')
            .select('tag_name, preference_level')
            .eq('user_id', userId);

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return [];
        }

        return data || [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
 * @param {string} vacancyId - UUID –≤–∞–∫–∞–Ω—Å–∏–∏
 * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
 */
export async function getVacancyTags(vacancyId) {
    try {
        const { data, error } = await supabase
            .from('vacancy_tags')
            .select('tag_name, relevance_score')
            .eq('vacancy_id', vacancyId);

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
            return [];
        }

        return data || [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
        return [];
    }
}

