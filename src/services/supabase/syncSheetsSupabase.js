import { supabase } from './supabase.js';
import { google } from 'googleapis';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
const auth = new google.auth.JWT(
  process.env.GOOGLE_SERVICE_EMAIL,
  null,
  process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  ['https://www.googleapis.com/auth/spreadsheets']
);

const sheetsService = google.sheets({ version: 'v4', auth });
const VACANCIES_SHEET_ID = process.env.GOOGLE_VACANCIES_SHEET_ID || process.env.GOOGLE_SHEET_ID;

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Google Sheets –≤ Supabase
export async function syncVacanciesFromSheetsToSupabase() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Google Sheets –≤ Supabase...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
    const response = await sheetsService.spreadsheets.values.get({
      spreadsheetId: VACANCIES_SHEET_ID,
      range: 'A:I' // –ù–∞–∑–≤–∞–Ω–∏–µ, –û–ø–∏—Å–∞–Ω–∏–µ, –≠–º–æ–¥–∑–∏, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –°—Å—ã–ª–∫–∞, –£—Ä–æ–≤–µ–Ω—å, –ó–∞—Ä–ø–ª–∞—Ç–∞, –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è, –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    });
    
    const rows = response.data.values || [];
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheets`);
    
    if (rows.length <= 1) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return { success: true, synced: 0 };
    }
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const vacancies = rows.slice(1).map((row, index) => ({
      title: row[0] || '',
      description: row[1] || '',
      emoji: row[2] || 'üíº',
      category: row[3] || '–û–±—â–µ–µ',
      link: row[4] || '',
      level: row[5] || '',
      salary: row[6] || '',
      requirements: row[7] || '',
      benefits: row[8] || '',
      is_active: true
    })).filter(v => v.title); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
    
    if (vacancies.length === 0) {
      return { success: true, synced: 0 };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Supabase
    const { data: existingVacancies, error: fetchError } = await supabase
      .from('vacancies')
      .select('title, category');
    
    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π:', fetchError);
      return { success: false, error: fetchError };
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    const existingMap = new Map();
    existingVacancies.forEach(v => {
      existingMap.set(`${v.title}_${v.category}`, true);
    });
    
    let syncedCount = 0;
    let updatedCount = 0;
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    for (const vacancy of vacancies) {
      const key = `${vacancy.title}_${vacancy.category}`;
      
      if (existingMap.has(key)) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        const { error: updateError } = await supabase
          .from('vacancies')
          .update(vacancy)
          .eq('title', vacancy.title)
          .eq('category', vacancy.category);
        
        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.title}:`, updateError);
        } else {
          updatedCount++;
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title}`);
        }
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        const { error: insertError } = await supabase
          .from('vacancies')
          .insert([vacancy]);
        
        if (insertError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.title}:`, insertError);
        } else {
          syncedCount++;
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title}`);
        }
      }
    }
    
    console.log(`üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${syncedCount} –Ω–æ–≤—ã—Ö, ${updatedCount} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö`);
    return { success: true, synced: syncedCount, updated: updatedCount };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
    return { success: false, error: error.message };
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ Supabase –≤ Google Sheets
export async function syncSubscriptionsFromSupabaseToSheets() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ Supabase –≤ Google Sheets...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ Supabase
    const { data: subscriptions, error } = await supabase
      .from('subscriptions')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:', error);
      return { success: false, error: error.message };
    }
    
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${subscriptions.length} –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ Supabase`);
    
    if (subscriptions.length === 0) {
      return { success: true, synced: 0 };
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
    const rows = subscriptions.map(sub => [
      sub.created_at,
      sub.user_id,
      sub.username,
      sub.category
    ]);
    
    // –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await sheetsService.spreadsheets.values.clear({
      spreadsheetId: VACANCIES_SHEET_ID,
      range: 'Subscriptions!A:D'
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await sheetsService.spreadsheets.values.update({
      spreadsheetId: VACANCIES_SHEET_ID,
      range: 'Subscriptions!A1:D1',
      valueInputOption: 'RAW',
      resource: {
        values: [['–î–∞—Ç–∞', 'User ID', 'Username', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è']]
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (rows.length > 0) {
      await sheetsService.spreadsheets.values.update({
        spreadsheetId: VACANCIES_SHEET_ID,
        range: 'Subscriptions!A2:D' + (rows.length + 1),
        valueInputOption: 'RAW',
        resource: {
          values: rows
        }
      });
    }
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${rows.length} –ø–æ–¥–ø–∏—Å–æ–∫ –≤ Google Sheets`);
    return { success: true, synced: rows.length };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    return { success: false, error: error.message };
  }
}

// –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
export async function fullSync() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Google Sheets –≤ Supabase
    const vacanciesResult = await syncVacanciesFromSheetsToSupabase();
    
    // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ Supabase –≤ Google Sheets
    const subscriptionsResult = await syncSubscriptionsFromSupabaseToSheets();
    
    console.log('üéâ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`  - –í–∞–∫–∞–Ω—Å–∏–∏: ${vacanciesResult.synced} –Ω–æ–≤—ã—Ö, ${vacanciesResult.updated} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö`);
    console.log(`  - –ü–æ–¥–ø–∏—Å–∫–∏: ${subscriptionsResult.synced} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö`);
    
    return {
      success: true,
      vacancies: vacanciesResult,
      subscriptions: subscriptionsResult
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    return { success: false, error: error.message };
  }
}
