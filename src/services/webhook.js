import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { fullSync } from './supabase/syncSheetsSupabase.js';
import { syncSurveyQuestions } from './supabase/syncSurveyQuestions.js';
import { telegramNotifications } from './telegram-notifications.js';
import surveyApi from '../api/surveyApi.js';
import surveyQuestionsApi from '../api/surveyQuestionsApi.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class WebhookService {
  constructor() {
    this.app = express();
    this.port = process.env.PORT || process.env.WEBHOOK_PORT || 3001;
    this.isRunning = false;
    this.server = null;
    this.setupMiddleware();
    this.setupRoutes();
  }

  setupMiddleware() {
    //  –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ body
    this.app.use(express.json({ limit: '50kb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '50kb' }));
    
    //  –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: CORS —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—à–∏—Ö –¥–æ–º–µ–Ω–æ–≤
    this.app.use((req, res, next) => {
      const allowedOrigins = [
        process.env.WEBAPP_URL,
        'https://web.telegram.org',
        'http://localhost:3001',
        'http://localhost:3000'
      ].filter(Boolean);
      
      const origin = req.headers.origin;
      if (allowedOrigins.some(allowed => origin?.startsWith(allowed))) {
        res.setHeader('Access-Control-Allow-Origin', origin);
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, x-telegram-init-data');
        res.setHeader('Access-Control-Max-Age', '3600');
      }
      
      if (req.method === 'OPTIONS') {
        return res.sendStatus(200);
      }
      
      next();
    });
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    this.app.use((req, res, next) => {
      console.log(`üì® ${req.method} ${req.path} - ${new Date().toISOString()}`);
      next();
    });
    
    //  –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ó–∞—â–∏—Ç–∞ –æ—Ç timing attacks
    this.app.use((req, res, next) => {
      const start = Date.now();
      res.on('finish', () => {
        const duration = Date.now() - start;
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç timing –∞—Ç–∞–∫
        if (duration < 100) {
          setTimeout(() => {}, Math.random() * 50);
        }
      });
      next();
    });
  }

  setupRoutes() {
    this.app.use('/webapp', express.static(path.join(__dirname, '../../webapp')));
    this.app.use('/api/survey', surveyApi); //  –û—Å–Ω–æ–≤–Ω–æ–µ API –¥–ª—è WebApp
    this.app.use('/api/questions', surveyQuestionsApi); //  API –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Supabase
    this.app.post('/webhook/sheets-updated', this.handleSheetsUpdate.bind(this));
    
    this.app.post('/webhook/manual-sync', this.handleManualSync.bind(this));
    this.app.get('/health', this.handleHealthCheck.bind(this));
    
    this.app.get('/test', this.handleTest.bind(this));
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: catch-all –º–∞—Ä—à—Ä—É—Ç –ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–¥–µ—Å—å, 
    // —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å /webhook/telegram –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤)
  finalizeCatchAll() {
    this.app.use('*', this.handleNotFound.bind(this));
  }

  async handleSheetsUpdate(req, res) {
    try {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Google Sheets');
      const authToken = req.headers['authorization'];
      
      //  –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ webhook secret
      if (!process.env.WEBHOOK_SECRET) {
        console.error('‚ùå WEBHOOK_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - webhook –æ—Ç–∫–ª—é—á–µ–Ω');
        return res.status(503).json({ error: 'Webhook temporarily unavailable' });
      }
      
      if (authToken !== `Bearer ${process.env.WEBHOOK_SECRET}`) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π WEBHOOK_SECRET');
        return res.status(401).json({ error: 'Unauthorized' });
      }
      const result = await fullSync();
      
      if (result.success) {
        console.log('‚úÖ Webhook —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (this.hasChanges(result)) {
          await telegramNotifications.notifySyncResult(result, 'webhook');
        }
        
        res.status(200).json({
          success: true,
          message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
          result: {
            vacancies: result.vacancies,
            subscriptions: result.subscriptions
          }
        });
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ webhook —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', result.error);
        
        await telegramNotifications.notifyAdmin(
          `‚ùå *–û—à–∏–±–∫–∞ webhook —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏*\n\n` +
          `–û—à–∏–±–∫–∞: ${result.error}\n` +
          `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`,
          { parse_mode: 'Markdown' }
        );
        
        res.status(500).json({
          success: false,
          error: result.error
        });
      }
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook:', error);
      
      await telegramNotifications.notifyCriticalError(error, 'webhook —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
      
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async handleManualSync(req, res) {
    try {
      console.log('üîß –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ webhook');
      
      const result = await fullSync();
      
      if (result.success) {
        await telegramNotifications.notifySyncResult(result, '—Ä—É—á–Ω–∞—è webhook');
        
        res.status(200).json({
          success: true,
          message: '–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
          result: {
            vacancies: result.vacancies,
            subscriptions: result.subscriptions
          }
        });
      } else {
        res.status(500).json({
          success: false,
          error: result.error
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç Google Sheets
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Apps Script
   */
  async handleQuestionsSync(req, res) {
    try {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç Google Sheets');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      const authToken = req.headers['authorization'];
      if (process.env.WEBHOOK_SECRET && authToken !== `Bearer ${process.env.WEBHOOK_SECRET}`) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return res.status(401).json({ error: 'Unauthorized' });
      }

      const { sheet, timestamp } = req.body;
      console.log(`   –õ–∏—Å—Ç: ${sheet || '–≤—Å–µ'}`);
      console.log(`   –í—Ä–µ–º—è: ${timestamp || new Date().toISOString()}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      const result = await syncSurveyQuestions();
      
      if (result.success) {
        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${result.categories?.synced || 0}`);
        console.log(`   –ü–æ–ª–µ–π: ${result.fields?.synced || 0}`);
        
        res.json({
          success: true,
          message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
          result: {
            categories: result.categories?.synced || 0,
            fields: result.fields?.synced || 0
          }
        });
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', result.error);
        
        res.status(500).json({
          success: false,
          error: result.error
        });
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
      
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
   * KISS: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
   */
  handleHealthCheck(req, res) {
    res.status(200).json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      service: 'webhook-sync',
      version: '1.0.0'
    });
  }

  /**
   * –¢–µ—Å—Ç–æ–≤—ã–π endpoint
   * SOLID: –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  handleTest(req, res) {
    res.status(200).json({
      message: 'Webhook —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç',
      timestamp: new Date().toISOString(),
      endpoints: [
        'POST /webhook/sheets-updated',
        'POST /webhook/manual-sync',
        'POST /webhook/sync-questions',
        'GET /health',
        'GET /test',
        'GET /api/questions/categories',
        'POST /api/survey/complete'
      ]
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
   * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞ –æ—à–∏–±–æ–∫
   */
  handleNotFound(req, res) {
    res.status(404).json({
      error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
      availableEndpoints: [
        'POST /webhook/sheets-updated',
        'POST /webhook/manual-sync',
        'GET /health',
        'GET /test'
      ]
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
   * KISS: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫
   */
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Webhook —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return Promise.resolve();
    }

    return new Promise((resolve, reject) => {
      try {
        this.server = this.app.listen(this.port, () => {
          this.isRunning = true;
          console.log(`üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
          console.log(`üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:`);
          console.log(`   ‚Ä¢ POST http://localhost:${this.port}/webhook/sheets-updated`);
          console.log(`   ‚Ä¢ POST http://localhost:${this.port}/webhook/manual-sync`);
          console.log(`   ‚Ä¢ POST http://localhost:${this.port}/webhook/sync-questions`);
          console.log(`   ‚Ä¢ GET http://localhost:${this.port}/health`);
          console.log(`   ‚Ä¢ GET http://localhost:${this.port}/test`);
          console.log(`   ‚Ä¢ WebApp: http://localhost:${this.port}/webapp/`);
          resolve();
        });

        this.server.on('error', (error) => {
          if (error.code === 'EADDRINUSE') {
            console.error(`‚ùå –ü–æ—Ä—Ç ${this.port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
            console.error(`üí° –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ WEBHOOK_PORT –≤ .env`);
          }
          reject(error);
        });
      } catch (error) {
        reject(error);
      }
    });
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
   * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return Promise.resolve();
    }

    return new Promise((resolve) => {
      if (this.server) {
        this.server.close(() => {
          this.isRunning = false;
          console.log('‚èπÔ∏è Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          resolve();
        });
      } else {
        this.isRunning = false;
        console.log('‚èπÔ∏è Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        resolve();
      }
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
   * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  hasChanges(result) {
    const vacancies = result.vacancies || {};
    const subscriptions = result.subscriptions || {};
    
    return (vacancies.synced > 0 || vacancies.updated > 0 || subscriptions.synced > 0);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏ singleton instance
export { WebhookService };
export const webhookService = new WebhookService();
