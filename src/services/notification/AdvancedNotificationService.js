import { findMatchingVacancies, getUserTags, getVacancyTags } from '../supabase/matchingService.js';
import { getVacancyById } from '../supabase/supabaseVacancies.js';
import { telegramNotifications } from '../telegram-notifications.js';
import { supabase } from '../supabase/supabase.js';

/**
 * –°–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
 * 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø–æ —Ç–µ–≥–∞–º)
 * 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
 * 4. –ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ notifications
 */
export class AdvancedNotificationService {
  constructor() {
    this.name = 'AdvancedNotificationService';
  }

  async sendPersonalizedNotifications() {
    try {
      const users = await this.getUsersWithPreferences();
      
      if (users.length === 0) {
        return { success: true, sent: 0 };
      }

      let totalSent = 0;
      let totalErrors = 0;

      for (const user of users) {
        try {
          const sent = await this.sendNotificationsToUser(user);
          totalSent += sent;
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error.message);
          totalErrors++;
        }
        
        await new Promise(resolve => setTimeout(resolve, 200));
      }

      if (totalSent > 0) {
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${totalSent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
      }
      
      return { 
        success: true, 
        sent: totalSent, 
        errors: totalErrors,
        users_processed: users.length 
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
      return { success: false, error: error.message };
    }
  }

  async getUsersWithPreferences() {
    try {
      const { data, error } = await supabase
        .from('user_preferences')
        .select('user_id, username, first_name, preferences')
        .eq('is_active', true);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return [];
    }
  }

  async sendNotificationsToUser(user) {
    try {
      const matchingVacancies = await findMatchingVacancies(user.user_id);
      
      if (matchingVacancies.length === 0) {
        return 0;
      }

      let sentCount = 0;

      for (const vacancy of matchingVacancies) {
        try {
          await this.sendPersonalizedVacancyNotification(
            user, 
            vacancy, 
            vacancy.matchCount,
            vacancy.matchedTags
          );
          
          await this.recordNotificationSent(user.user_id, vacancy.id);
          sentCount++;
          
          await new Promise(resolve => setTimeout(resolve, 300));
          
        } catch (error) {
          if (error.response?.error_code === 403) {
            await this.deactivateUserSubscription(user.user_id);
            break;
          }
        }
      }

      return sentCount;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id}:`, error.message);
      return 0;
    }
  }

  async sendPersonalizedVacancyNotification(user, vacancy, matchCount, matchedTags) {
    const message = this.createPersonalizedMessage(user, vacancy, matchCount, matchedTags);
    
    await telegramNotifications.sendMessage(user.user_id, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{
            text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏',
            callback_data: `detail_${vacancy.id}`
          }],
          [{
            text: 'üìù –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è',
            callback_data: `apply_${vacancy.id}`
          }],
          [{
            text: 'üîî –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏',
            callback_data: 'my_subscriptions'
          }]
        ]
      }
    });
  }

  createPersonalizedMessage(user, vacancy, matchCount, matchedTags) {
    const userName = user.first_name || user.username || '–ö–æ–ª–ª–µ–≥–∞';
    
    let message = `üéØ *${userName}, –¥–ª—è –≤–∞—Å –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è\\!*\n\n`;
    
    message += `üíº *${this.escapeMarkdown(vacancy.title)}*\n`;
    message += `üè¢ ${this.escapeMarkdown(vacancy.category || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n`;
    
    if (vacancy.salary) {
      message += `üí∞ ${this.escapeMarkdown(vacancy.salary)}\n`;
    }
    
    if (vacancy.work_type) {
      message += `üìç ${this.escapeMarkdown(vacancy.work_type)}\n`;
    }
    
    if (vacancy.location) {
      message += `üåç ${this.escapeMarkdown(vacancy.location)}\n`;
    }
    
    // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
    if (vacancy.description) {
      const shortDesc = vacancy.description.substring(0, 200);
      message += `\nüìù ${this.escapeMarkdown(shortDesc)}${vacancy.description.length > 200 ? '...' : ''}\n`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–µ–≥–∏
    if (matchedTags && matchedTags.length > 0) {
      const tags = matchedTags.slice(0, 5).map(t => this.escapeMarkdown(t)).join(', ');
      message += `\nüè∑Ô∏è *–°–æ–≤–ø–∞–¥–µ–Ω–∏—è:* ${tags} \\(${matchCount}\\)\n`;
    }
    
    message += `\nüí° _–í–∞–∫–∞–Ω—Å–∏—è –ø–æ–¥–æ–±—Ä–∞–Ω–∞ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º_`;
    
    return message;
  }

  // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown v2
  escapeMarkdown(text) {
    if (!text) return '';
    return String(text)
      .replace(/\_/g, '\\_')
      .replace(/\*/g, '\\*')
      .replace(/\[/g, '\\[')
      .replace(/\]/g, '\\]')
      .replace(/\(/g, '\\(')
      .replace(/\)/g, '\\)')
      .replace(/\~/g, '\\~')
      .replace(/\`/g, '\\`')
      .replace(/\>/g, '\\>')
      .replace(/\#/g, '\\#')
      .replace(/\+/g, '\\+')
      .replace(/\-/g, '\\-')
      .replace(/\=/g, '\\=')
      .replace(/\|/g, '\\|')
      .replace(/\{/g, '\\{')
      .replace(/\}/g, '\\}')
      .replace(/\./g, '\\.')
      .replace(/\!/g, '\\!');
  }

  async deactivateUserSubscription(userId) {
    try {
      const { error } = await supabase
        .from('user_preferences')
        .update({ is_active: false })
        .eq('user_id', userId);

      if (!error) {
        console.log(`–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
      }

      return !error;
    } catch (error) {
      return false;
    }
  }

  async recordNotificationSent(userId, vacancyId) {
    try {
      await supabase
        .from('notifications')
        .insert({
          user_id: userId,
          vacancy_id: vacancyId,
          status: 'sent',
          sent_at: new Date().toISOString()
        });
      return true;
    } catch (error) {
      return false;
    }
  }

  async getNotificationStats() {
    try {
      const { data, error } = await supabase
        .from('notifications')
        .select('status, created_at')
        .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()); // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        return null;
      }

      const stats = {
        total: data.length,
        sent: data.filter(n => n.status === 'sent').length,
        failed: data.filter(n => n.status === 'failed').length,
        pending: data.filter(n => n.status === 'pending').length
      };

      return stats;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return null;
    }
  }
}

export const advancedNotificationService = new AdvancedNotificationService();

