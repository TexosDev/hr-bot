import { findMatchingUsers } from '../supabase/supabaseUserPreferences.js';
import { getVacancyByIdFromSupabase } from '../supabase/supabaseVacancies.js';
import { telegramNotifications } from '../telegram-notifications.js';

/**
 * –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID, DRY, KISS
 */

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
 * SOLID: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
 */
export async function notifyUsersAboutNewVacancy(vacancyId) {
  try {
    console.log(`üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancyId}...`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const vacancy = await getVacancyByIdFromSupabase(vacancyId);
    if (!vacancy) {
      console.error(`‚ùå –í–∞–∫–∞–Ω—Å–∏—è ${vacancyId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return { success: false, error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const matchingUsers = await findMatchingUsers(vacancyId);
    
    if (matchingUsers.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: ${vacancy.title}`);
      return { success: true, notified: 0 };
    }
    
    console.log(`üì¢ –ù–∞–π–¥–µ–Ω–æ ${matchingUsers.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = createVacancyNotificationMessage(vacancy);
    
    let successCount = 0;
    let errorCount = 0;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for (const user of matchingUsers) {
      try {
        await sendNotificationToUser(user.user_id, message, vacancyId);
        successCount++;
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.user_id}`);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}:`, error);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if (error.response?.error_code === 403) {
          console.log(`üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.user_id}`);
          await deactivateUserSubscription(user.user_id);
        }
      }
    }
    
    console.log(`üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
    
    return {
      success: true,
      notified: successCount,
      errors: errorCount
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
 * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function createVacancyNotificationMessage(vacancy) {
  let message = `üîî **–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!**\n\n`;
  message += `üìã **${vacancy.emoji} ${vacancy.title}**\n\n`;
  
  if (vacancy.description) {
    message += `üìù ${vacancy.description}\n\n`;
  }
  
  message += `üìä **–î–µ—Ç–∞–ª–∏:**\n`;
  message += `‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${vacancy.category}\n`;
  message += `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${vacancy.level || '–õ—é–±–æ–π'}\n`;
  message += `‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${vacancy.salary || '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'}\n`;
  
  if (vacancy.work_type && vacancy.work_type !== '–õ—é–±–æ–π') {
    message += `‚Ä¢ –§–æ—Ä–º–∞—Ç: ${vacancy.work_type}\n`;
  }
  
  if (vacancy.location && vacancy.location !== '–ù–µ —É–∫–∞–∑–∞–Ω–æ') {
    message += `‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: ${vacancy.location}\n`;
  }
  
  if (vacancy.tags && vacancy.tags.length > 0) {
    message += `‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${vacancy.tags.join(', ')}\n`;
  }
  
  message += `\nüéØ **–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –æ—Ç–∫–ª–∏–∫?**\n`;
  message += `–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º`;
  
  return message;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendNotificationToUser(userId, message, vacancyId) {
  try {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${message.substring(0, 100)}...`);
    
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º
    // await bot.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' });
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    throw error;
  }
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * SOLID: –û—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function sendBulkNotifications(vacancyIds) {
  try {
    console.log(`üì¢ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${vacancyIds.length} –≤–∞–∫–∞–Ω—Å–∏–π...`);
    
    const results = [];
    
    for (const vacancyId of vacancyIds) {
      const result = await notifyUsersAboutNewVacancy(vacancyId);
      results.push({ vacancyId, ...result });
    }
    
    const totalNotified = results.reduce((sum, r) => sum + (r.notified || 0), 0);
    const totalErrors = results.reduce((sum, r) => sum + (r.errors || 0), 0);
    
    console.log(`üìä –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${totalNotified} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, ${totalErrors} –æ—à–∏–±–æ–∫`);
    
    return {
      success: true,
      totalNotified,
      totalErrors,
      results
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * SOLID: –û—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
export async function getNotificationStats() {
  try {
    const { data, error } = await supabase
      .from('notifications')
      .select('status, sent_at')
      .gte('sent_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()); // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return null;
    }
    
    const stats = {
      total: data.length,
      sent: data.filter(n => n.status === 'sent').length,
      delivered: data.filter(n => n.status === 'delivered').length,
      failed: data.filter(n => n.status === 'failed').length,
      blocked: data.filter(n => n.status === 'blocked').length
    };
    
    return stats;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    return null;
  }
}
