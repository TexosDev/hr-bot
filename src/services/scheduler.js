import cron from 'node-cron';
import { fullSync } from './supabase/syncSheetsSupabase.js';
import { syncSurveyQuestions } from './supabase/syncSurveyQuestions.js';
import { notifyAdmin } from './telegram-notifications.js';
import { advancedNotificationService } from './notification/AdvancedNotificationService.js';

class SyncScheduler {
  constructor() {
    this.isRunning = false;
    this.jobs = [];
  }

  start() {
    if (this.isRunning) {
      return;
    }

    const frequentSync = cron.schedule('*/30 * * * *', async () => {
      await this.performSync('–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è');
    });

    const dailySync = cron.schedule('0 9 * * *', async () => {
      await this.performSync('—É—Ç—Ä–µ–Ω–Ω—è—è');
    });

    const eveningSync = cron.schedule('0 18 * * *', async () => {
      await this.performSync('–≤–µ—á–µ—Ä–Ω—è—è');
    });

    const personalizedNotifications = cron.schedule('0 */2 * * *', async () => {
      await this.sendPersonalizedNotifications();
    });

    const questionsSync = cron.schedule('0 * * * *', async () => {
      await this.syncQuestions();
    });

    this.jobs = [frequentSync, dailySync, eveningSync, personalizedNotifications, questionsSync];
    this.isRunning = true;

    console.log('‚úÖ Scheduler started');
  }

  stop() {
    if (!this.isRunning) {
      return;
    }

    this.jobs.forEach(job => job.stop());
    this.jobs = [];
    this.isRunning = false;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   * SOLID: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
   */
  async performSync(type) {
    try {
      const result = await fullSync();
      
      if (result.success) {
        const message = this.formatSuccessMessage(result, type);
        console.log(message);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (this.hasChanges(result)) {
          await notifyAdmin(message);
        }
      } else {
        const errorMessage = `‚ùå –û—à–∏–±–∫–∞ ${type} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${result.error}`;
        console.error(errorMessage);
        await notifyAdmin(errorMessage);
      }
    } catch (error) {
      const errorMessage = `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ${type} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`;
      console.error(errorMessage);
      await notifyAdmin(errorMessage);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
   * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  formatSuccessMessage(result, type) {
    const vacancies = result.vacancies || {};
    const subscriptions = result.subscriptions || {};
    
    return `üîÑ ${type} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
           `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
           `‚Ä¢ –í–∞–∫–∞–Ω—Å–∏–∏: ${vacancies.synced || 0} –Ω–æ–≤—ã—Ö, ${vacancies.updated || 0} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö\n` +
           `‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏: ${subscriptions.synced || 0} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n\n` +
           `‚è∞ ${new Date().toLocaleString('ru-RU')}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
   * KISS: –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  hasChanges(result) {
    const vacancies = result.vacancies || {};
    
    return (vacancies.synced > 0 || vacancies.updated > 0);
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * SOLID: –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
   */
  async manualSync() {
    await this.performSync('—Ä—É—á–Ω–∞—è');
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–ø—Ä–æ—Å–∞
   * SOLID: –û—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
   */
  async syncQuestions() {
    try {
      const result = await syncSurveyQuestions();
      
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
      if (!result.success) {
        await notifyAdmin(
          `‚ùå *–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤*\n\n` +
          `–û—à–∏–±–∫–∞: ${result.error}`
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error.message);
      await notifyAdmin(
        `‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤*\n\n` +
        `–û—à–∏–±–∫–∞: ${error.message}`
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   * SOLID: –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendPersonalizedNotifications() {
    try {
      const result = await advancedNotificationService.sendPersonalizedNotifications();
      
      if (result.success && result.sent > 0) {
        await notifyAdmin(
          `üîî *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n` +
          `‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n` +
          `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.users_processed}`
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error.message);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   * DRY: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      jobsCount: this.jobs.length,
      nextRuns: this.jobs.map(job => job.nextDate?.toISOString() || 'N/A')
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const syncScheduler = new SyncScheduler();
