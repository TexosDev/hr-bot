import { BaseAction } from './BaseAction.js';
import { getSelectedVacancy, clearSession } from '../utils/session.js';
import { createAfterSelectionKeyboard, createCancelKeyboard } from '../services/vacancies.js';

/**
 * –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID, DRY, KISS
 */

/**
 * –û—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª–∏–∫–∞ (–Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π flow)
 */
export class CancelApplyAction extends BaseAction {
  constructor() {
    super('cancel_apply');
  }

  async execute(ctx) {
    try {
      clearSession(ctx.from.id);
      
      await ctx.editMessageText(
        '‚ùå **–û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω**\n\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫.',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data: 'back_to_categories' }]
            ]
          }
        }
      );
      
      await this.answerCallback(ctx, '–û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω');
    } catch (error) {
      await this.handleError(ctx, error, '–æ—Ç–º–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∞');
    }
  }
}

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞
 */
export class ChangeResponseAction extends BaseAction {
  constructor() {
    super('change_response');
  }

  async execute(ctx) {
    try {
      const selectedVacancy = getSelectedVacancy(ctx.from.id);
      
      if (!selectedVacancy) {
        await this.answerCallback(ctx, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é');
        return;
      }

      await ctx.editMessageText(
        'üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞**\n\n' +
        `–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: ${selectedVacancy.emoji} ${selectedVacancy.title}\n\n` +
        '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é.',
        {
          parse_mode: 'Markdown',
          reply_markup: createAfterSelectionKeyboard(selectedVacancy).reply_markup
        }
      );
      
      await this.answerCallback(ctx, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞');
    } catch (error) {
      await this.handleError(ctx, error, '–∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞');
    }
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª–∏–∫–∞
 */
export class CancelResponseAction extends BaseAction {
  constructor() {
    super('cancel_response');
  }

  async execute(ctx) {
    try {
      const selectedVacancy = getSelectedVacancy(ctx.from.id);
      
      if (!selectedVacancy) {
        await this.answerCallback(ctx, '‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã');
        return;
      }

      await ctx.editMessageText(
        '‚ùå **–û—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª–∏–∫–∞**\n\n' +
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${selectedVacancy.title}"?`,
        {
          parse_mode: 'Markdown',
          reply_markup: createCancelKeyboard().reply_markup
        }
      );
      
      await this.answerCallback(ctx, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã');
    } catch (error) {
      await this.handleError(ctx, error, '–æ—Ç–º–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∞');
    }
  }
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
 */
export class ConfirmCancelAction extends BaseAction {
  constructor() {
    super('confirm_cancel');
  }

  async execute(ctx) {
    try {
      clearSession(ctx.from.id);
      
      await ctx.editMessageText(
        '‚úÖ **–û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω**\n\n' +
        '–í–∞—à –æ—Ç–∫–ª–∏–∫ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –í—ã–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: 'show_vacancies' }],
              [{ text: 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ', callback_data: 'send_resume' }]
            ]
          }
        }
      );
      
      await this.answerCallback(ctx, '–û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω');
    } catch (error) {
      await this.handleError(ctx, error, '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã');
    }
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞
 */
export class KeepResponseAction extends BaseAction {
  constructor() {
    super('keep_response');
  }

  async execute(ctx) {
    try {
      const selectedVacancy = getSelectedVacancy(ctx.from.id);
      
      if (!selectedVacancy) {
        await this.answerCallback(ctx, '‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏');
        return;
      }

      await ctx.editMessageText(
        '‚úÖ **–û—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω**\n\n' +
        `–í–∞–∫–∞–Ω—Å–∏—è: ${selectedVacancy.emoji} ${selectedVacancy.title}\n\n` +
        '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ (PDF, DOC, DOCX, TXT).',
        {
          parse_mode: 'Markdown',
          reply_markup: createAfterSelectionKeyboard(selectedVacancy).reply_markup
        }
      );
      
      await this.answerCallback(ctx, '–û—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } catch (error) {
      await this.handleError(ctx, error, '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞');
    }
  }
}
