import { BaseAction } from './BaseAction.js';
import { getVacanciesFromSupabase } from '../services/supabase/supabaseVacancies.js';
import { getVacancyById, createVacancyDetailKeyboard, createDetailedVacancyMessage, createCategoryKeyboard, createMainMenuKeyboard, groupVacanciesByCategory } from '../services/vacancies.js';
import { setSelectedVacancy, getSelectedVacancy, clearSession } from '../utils/session.js';

/**
 * –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é - –Ω–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π flow
 */
export class ApplyToVacancyAction extends BaseAction {
  constructor() {
    super(/^apply_/);
  }

  async execute(ctx) {
    const vacancyId = this.extractParams(ctx.callbackQuery.data, 'apply_');
    
    try {
      const vacancies = await getVacanciesFromSupabase();
      const vacancy = getVacancyById(vacancies, vacancyId);
      
      if (!vacancy) {
        await this.answerCallback(ctx, '‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
      setSelectedVacancy(ctx.from.id, vacancy);

      await ctx.editMessageText(
        `‚úÖ **–û—Ç–ª–∏—á–Ω–æ! –û—Ç–∫–ª–∏–∫–∞–µ–º—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:**\n\n` +
        `${vacancy.emoji} **${vacancy.title}**\n\n` +
        `üìÑ **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ\n\n` +
        `üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã:\n` +
        `‚Ä¢ PDF (.pdf)\n` +
        `‚Ä¢ Word (.doc, .docx)\n` +
        `‚Ä¢ –¢–µ–∫—Å—Ç (.txt)\n\n` +
        `–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é', callback_data: 'back_to_categories' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_apply' }]
            ]
          }
        }
      );
      
      await this.answerCallback(ctx, '‚úÖ –û–∂–∏–¥–∞–µ–º –≤–∞—à–µ —Ä–µ–∑—é–º–µ');
    } catch (error) {
      await this.handleError(ctx, error, '–æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é');
    }
  }
}

/**
 * –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID, DRY, KISS
 */

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
 */
export class VacancyDetailAction extends BaseAction {
  constructor() {
    super(/^detail_/);
  }

  async execute(ctx) {
    const vacancyId = this.extractParams(ctx.callbackQuery.data, 'detail_');
    
    try {
      const vacancies = await getVacanciesFromSupabase();
      console.log('üîç VacancyDetailAction - vacancies:', vacancies ? vacancies.length : 'undefined');
      
      const vacancy = getVacancyById(vacancies, vacancyId);
      
      if (!vacancy) {
        await this.answerCallback(ctx, '‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      console.log('üîç VacancyDetailAction - vacancy:', vacancy.title);
      const message = createDetailedVacancyMessage(vacancy, vacancies);
      const keyboard = createVacancyDetailKeyboard(vacancy, true);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
      
      await this.answerCallback(ctx, `–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${vacancy.title}`);
    } catch (error) {
      await this.handleError(ctx, error, '–ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è');
    }
  }
}

/**
 * –ü–æ–∫–∞–∑ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
 */
export class VacancyBriefAction extends BaseAction {
  constructor() {
    super(/^brief_/);
  }

  async execute(ctx) {
    const vacancyId = this.extractParams(ctx.callbackQuery.data, 'brief_');
    
    try {
      const vacancies = await getVacanciesFromSupabase();
      const vacancy = getVacancyById(vacancies, vacancyId);
      
      if (!vacancy) {
        await this.answerCallback(ctx, '‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const message = `üìã **${vacancy.emoji} ${vacancy.title}**\n\n` +
                     `üìù ${vacancy.description}\n\n` +
                     `üìä –£—Ä–æ–≤–µ–Ω—å: ${vacancy.level || '–õ—é–±–æ–π'}\n` +
                     `üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${vacancy.salary || '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'}\n\n` +
                     `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      const keyboard = createVacancyDetailKeyboard(vacancy, false);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
      });
      
      await this.answerCallback(ctx, `–ü–æ–∫–∞–∑–∞–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${vacancy.title}`);
    } catch (error) {
      await this.handleError(ctx, error, '–ø–æ–∫–∞–∑–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è');
    }
  }
}

/**
 * –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π
 */
export class CategoryAction extends BaseAction {
  constructor() {
    super(/^category_/);
  }

  async execute(ctx) {
    const categoryKey = this.extractParams(ctx.callbackQuery.data, 'category_');
    
    try {
      const vacancies = await getVacanciesFromSupabase();
      const categories = groupVacanciesByCategory(vacancies);
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á—É (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
      const categoryName = Object.keys(categories).find(name => 
        name.toLowerCase().replace(/\s+/g, '_') === categoryKey
      );
      
      if (categoryName && categories[categoryName]) {
        const categoryVacancies = categories[categoryName];
        const message = `üìã **${categoryName}:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:`;
        
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: createCategoryKeyboard(categoryVacancies, categoryName).reply_markup
        });
        
        await this.answerCallback(ctx, `–ü–æ–∫–∞–∑–∞–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryName}`);
      } else {
        await this.answerCallback(ctx, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (error) {
      await this.handleError(ctx, error, '–ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export class BackToCategoriesAction extends BaseAction {
  constructor() {
    super('back_to_categories');
  }

  async execute(ctx) {
    try {
      const vacancies = await getVacanciesFromSupabase();
      const keyboard = createMainMenuKeyboard(vacancies);
      
      await ctx.editMessageText(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞–∫–∞–Ω—Å–∏–π:',
        {
          reply_markup: keyboard.reply_markup
        }
      );
      
      await this.answerCallback(ctx, '–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
    } catch (error) {
      await this.handleError(ctx, error, '–≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
    }
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export class BackToCategoryAction extends BaseAction {
  constructor() {
    super(/^back_to_category_/);
  }

  async execute(ctx) {
    const categoryName = this.extractParams(ctx.callbackQuery.data, 'back_to_category_');
    
    try {
      const vacancies = await getVacanciesFromSupabase();
      const categories = groupVacanciesByCategory(vacancies);
      
      if (categoryName && categories[categoryName]) {
        const categoryVacancies = categories[categoryName];
        const message = `üìã **${categoryName}:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:`;
        
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          reply_markup: createCategoryKeyboard(categoryVacancies, categoryName).reply_markup
        });
        
        await this.answerCallback(ctx, `–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryName}`);
      } else {
        await this.answerCallback(ctx, '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (error) {
      await this.handleError(ctx, error, '–≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
  }
}
