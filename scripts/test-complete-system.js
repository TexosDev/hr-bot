import 'dotenv/config';
import { supabase } from '../src/services/supabase/supabase.js';
import { saveUserPreferences, getUserPreferences } from '../src/services/supabase/supabaseUserPreferences.js';

console.log('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...');

async function testCompleteSystem() {
  try {
    console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ —Å —Ç–µ–≥–∞–º–∏');
    console.log('=' .repeat(50));
    
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...');
    
    const testUser = {
      id: 999999999,
      username: 'test_new_system',
      first_name: 'Test New System'
    };
    
    const testPreferences = {
      directions: ['IT', 'Design', 'Marketing'],
      technologies: ['React', 'Vue.js', 'JavaScript', 'Python'],
      experience: ['Middle', 'Senior'],
      salary: '150,000 - 250,000',
      work_conditions: ['–£–¥–∞–ª–µ–Ω–∫–∞', '–ì–∏–±—Ä–∏–¥'],
      location: '–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–µ–∑–¥—É',
      company_size: ['–°—Ä–µ–¥–Ω—è—è –∫–æ–º–ø–∞–Ω–∏—è', '–ö—Ä—É–ø–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è']
    };
    
    const saveResult = await saveUserPreferences(testUser.id, testUser, testPreferences);
    
    if (saveResult) {
      console.log('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π');
      return;
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...');
    
    const savedPreferences = await getUserPreferences(testUser.id);
    
    if (savedPreferences) {
      console.log('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      console.log('üìã –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', savedPreferences.preferences.directions);
      console.log('üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:', savedPreferences.preferences.technologies);
      console.log('üìà –û–ø—ã—Ç:', savedPreferences.preferences.experience);
      console.log('üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞:', savedPreferences.preferences.salary);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π');
      return;
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...');
    
    const { data: subscribers, error: subscribersError } = await supabase
      .from('user_preferences')
      .select('*')
      .eq('is_active', true);
    
    if (subscribersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', subscribersError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${subscribers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = {
        total: subscribers.length,
        by_direction: {},
        by_technology: {},
        by_experience: {}
      };
      
      subscribers.forEach(sub => {
        const prefs = sub.preferences;
        
        if (prefs.directions) {
          prefs.directions.forEach(dir => {
            stats.by_direction[dir] = (stats.by_direction[dir] || 0) + 1;
          });
        }
        
        if (prefs.technologies) {
          prefs.technologies.forEach(tech => {
            stats.by_technology[tech] = (stats.by_technology[tech] || 0) + 1;
          });
        }
        
        if (prefs.experience) {
          prefs.experience.forEach(exp => {
            stats.by_experience[exp] = (stats.by_experience[exp] || 0) + 1;
          });
        }
      });
      
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:');
      console.log('  - –í—Å–µ–≥–æ:', stats.total);
      console.log('  - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', Object.entries(stats.by_direction).slice(0, 3));
      console.log('  - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:', Object.entries(stats.by_technology).slice(0, 3));
      console.log('  - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É:', Object.entries(stats.by_experience));
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤...');
    
    const { data: tags, error: tagsError } = await supabase
      .from('tags')
      .select('*')
      .eq('is_active', true)
      .order('category, name');
    
    if (tagsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', tagsError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tags.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const tagsByCategory = {};
      tags.forEach(tag => {
        if (!tagsByCategory[tag.category]) {
          tagsByCategory[tag.category] = [];
        }
        tagsByCategory[tag.category].push(tag.name);
      });
      
      console.log('üìã –¢–µ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
      Object.entries(tagsByCategory).forEach(([category, tagNames]) => {
        console.log(`  - ${category}: ${tagNames.slice(0, 5).join(', ')}${tagNames.length > 5 ? '...' : ''}`);
      });
    }
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–µ–≥–∞–º–∏
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏...');
    
    const { data: vacancies, error: vacanciesError } = await supabase
      .from('vacancies')
      .select('*')
      .eq('is_active', true)
      .limit(3);
    
    if (vacanciesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π:', vacanciesError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${vacancies.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
      
      vacancies.forEach((vacancy, index) => {
        console.log(`  ${index + 1}. ${vacancy.title}`);
        console.log(`     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${vacancy.category}`);
        if (vacancy.tags && vacancy.tags.length > 0) {
          console.log(`     –¢–µ–≥–∏: ${vacancy.tags.join(', ')}`);
        } else {
          console.log(`     –¢–µ–≥–∏: –Ω–µ —É–∫–∞–∑–∞–Ω—ã`);
        }
        if (vacancy.work_type) {
          console.log(`     –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: ${vacancy.work_type}`);
        }
        if (vacancy.experience_level) {
          console.log(`     –£—Ä–æ–≤–µ–Ω—å: ${vacancy.experience_level}`);
        }
      });
    }
    
    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    try {
      const { fullSyncWithTags } = await import('../src/services/supabase/syncSheetsSupabaseWithTags.js');
      console.log('‚úÖ –ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
      console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm run sync');
    } catch (error) {
      console.log('‚ö†Ô∏è –ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', error.message);
    }
    
    console.log('\nüéâ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å —Ç–µ–≥–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
    console.log('‚úÖ –¢–µ–≥–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è');
    
    console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /subscribe');
    console.log('2. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –≤ –±–æ—Ç–µ');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π');
    console.log('4. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –≤ Google Sheets');
    console.log('5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: npm run sync');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testCompleteSystem();
