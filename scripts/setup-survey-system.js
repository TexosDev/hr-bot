import 'dotenv/config';
import { supabase } from '../src/services/supabase/supabase.js';
import fs from 'fs';
import path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–æ—Å–æ–≤
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Å—Ö–µ–º—É —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
 */

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–æ—Å–æ–≤...');

async function setupSurveySystem() {
  try {
    // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
    const schemaPath = path.join(process.cwd(), 'database', 'survey-schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    console.log('üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å—Ö–µ–º—ã...');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = schema
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const command of commands) {
      try {
        if (command.includes('INSERT INTO') && command.includes('ON CONFLICT')) {
          // –î–ª—è INSERT —Å ON CONFLICT –∏—Å–ø–æ–ª—å–∑—É–µ–º rpc
          const { error } = await supabase.rpc('exec_sql', { sql: command });
          if (error) {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): ${command.substring(0, 50)}...`);
          } else {
            console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${command.substring(0, 50)}...`);
            successCount++;
          }
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
          const { error } = await supabase.rpc('exec_sql', { sql: command });
          if (error) {
            console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫: ${error.message}`);
          } else {
            console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${command.substring(0, 50)}...`);
            successCount++;
          }
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    const tables = ['tags', 'survey_questions', 'user_survey_responses', 'user_subscriptions', 'vacancy_tags', 'user_tags'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase.from(table).select('*').limit(1);
        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: —Å–æ–∑–¥–∞–Ω–∞`);
        }
      } catch (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const { data: tags, error: tagsError } = await supabase.from('tags').select('*');
      if (tagsError) {
        console.log(`‚ùå –¢–µ–≥–∏: ${tagsError.message}`);
      } else {
        console.log(`‚úÖ –¢–µ–≥–∏: ${tags.length} –∑–∞–ø–∏—Å–µ–π`);
      }
    } catch (error) {
      console.log(`‚ùå –¢–µ–≥–∏: ${error.message}`);
    }
    
    try {
      const { data: questions, error: questionsError } = await supabase.from('survey_questions').select('*');
      if (questionsError) {
        console.log(`‚ùå –í–æ–ø—Ä–æ—Å—ã: ${questionsError.message}`);
      } else {
        console.log(`‚úÖ –í–æ–ø—Ä–æ—Å—ã: ${questions.length} –∑–∞–ø–∏—Å–µ–π`);
      }
    } catch (error) {
      console.log(`‚ùå –í–æ–ø—Ä–æ—Å—ã: ${error.message}`);
    }
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤');
    console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫');
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupSurveySystem();
