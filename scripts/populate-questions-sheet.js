#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è Google –¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ questions.json
 * –°–æ–∑–¥–∞–µ—Ç –ª–∏—Å—Ç—ã "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" –∏ "–ü–æ–ª—è" –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏—Ö
 */

import { google } from 'googleapis';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m'
};

function success(message) {
    console.log(`${colors.green}‚úÖ ${message}${colors.reset}`);
}

function error(message) {
    console.log(`${colors.red}‚ùå ${message}${colors.reset}`);
}

function info(message) {
    console.log(`${colors.blue}‚ÑπÔ∏è  ${message}${colors.reset}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
const auth = new google.auth.JWT(
    process.env.GOOGLE_SERVICE_EMAIL,
    null,
    process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
    ['https://www.googleapis.com/auth/spreadsheets']
);

const sheetsService = google.sheets({ version: 'v4', auth });
const SHEET_ID = process.env.GOOGLE_QUESTIONS_SHEET_ID || process.env.GOOGLE_SHEET_ID;

async function main() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ó–ê–ü–û–õ–ù–ï–ù–ò–ï GOOGLE –¢–ê–ë–õ–ò–¶–´ –ò–ó questions.json');
    console.log('='.repeat(60) + '\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!SHEET_ID) {
        error('GOOGLE_QUESTIONS_SHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
        info('–î–æ–±–∞–≤—å—Ç–µ: GOOGLE_QUESTIONS_SHEET_ID=–≤–∞—à_id_—Ç–∞–±–ª–∏—Ü—ã\n');
        process.exit(1);
    }

    if (!process.env.GOOGLE_SERVICE_EMAIL || !process.env.GOOGLE_PRIVATE_KEY) {
        error('Google Service Account –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        info('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_SERVICE_EMAIL –∏ GOOGLE_PRIVATE_KEY –≤ .env\n');
        process.exit(1);
    }

    success('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    info(`–¢–∞–±–ª–∏—Ü–∞ ID: ${SHEET_ID}\n`);

    // –ß–∏—Ç–∞–µ–º questions.json
    console.log('üìñ –ß—Ç–µ–Ω–∏–µ questions.json...\n');
    
    const questionsPath = path.join(__dirname, '../webapp/questions.json');
    const questionsData = JSON.parse(fs.readFileSync(questionsPath, 'utf-8'));

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoriesData = [];
    categoriesData.push(['category_key', 'name', 'description', 'icon', 'display_order', 'is_active']); // –ó–∞–≥–æ–ª–æ–≤–æ–∫

    let order = 1;
    for (const [categoryKey, categoryData] of Object.entries(questionsData.categories)) {
        const categoryName = getCategoryName(categoryKey);
        const description = getCategoryDescription(categoryKey);
        const icon = getCategoryIcon(categoryKey);
        
        categoriesData.push([
            categoryKey,
            categoryName,
            description,
            icon,
            order++,
            'TRUE'
        ]);
    }

    success(`–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${categoriesData.length - 1} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–µ–π
    const fieldsData = [];
    fieldsData.push(['category_key', 'field_key', 'field_type', 'label', 'placeholder', 'options', 'is_required', 'is_common', 'display_order']); // –ó–∞–≥–æ–ª–æ–≤–æ–∫

    // –û–±—â–∏–µ –ø–æ–ª—è
    let fieldOrder = 1;
    for (const [fieldKey, fieldData] of Object.entries(questionsData.common_fields)) {
        const options = fieldData.options ? fieldData.options.join(', ') : '';
        const isRequired = !fieldData.optional;
        
        fieldsData.push([
            '', // category_key –ø—É—Å—Ç–æ–π –¥–ª—è –æ–±—â–∏—Ö –ø–æ–ª–µ–π
            fieldKey,
            fieldData.type,
            fieldData.label,
            fieldData.placeholder || '',
            options,
            isRequired ? 'TRUE' : 'FALSE',
            'TRUE', // is_common
            fieldOrder++
        ]);
    }

    success(`–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${fieldOrder - 1} –æ–±—â–∏—Ö –ø–æ–ª–µ–π`);

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const [categoryKey, categoryData] of Object.entries(questionsData.categories)) {
        if (!categoryData.extra_fields) continue;

        let catFieldOrder = 1;
        for (const [fieldKey, fieldData] of Object.entries(categoryData.extra_fields)) {
            const options = fieldData.options ? fieldData.options.join(', ') : '';
            
            fieldsData.push([
                categoryKey,
                fieldKey,
                fieldData.type,
                fieldData.label,
                fieldData.placeholder || '',
                options,
                'FALSE', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
                'FALSE', // is_common
                catFieldOrder++
            ]);
        }
    }

    success(`–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${fieldsData.length - 1} –ø–æ–ª–µ–π –≤—Å–µ–≥–æ\n`);

    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç—ã –≤ Google –¢–∞–±–ª–∏—Ü–µ
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Google –¢–∞–±–ª–∏—Ü—ã...\n');

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤
        const spreadsheet = await sheetsService.spreadsheets.get({
            spreadsheetId: SHEET_ID
        });

        const existingSheets = spreadsheet.data.sheets.map(s => s.properties.title);
        info(`–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç—ã: ${existingSheets.join(', ')}`);

        // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!existingSheets.includes('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')) {
            await sheetsService.spreadsheets.batchUpdate({
                spreadsheetId: SHEET_ID,
                requestBody: {
                    requests: [{
                        addSheet: {
                            properties: {
                                title: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
                            }
                        }
                    }]
                }
            });
            success('–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"');
        } else {
            info('–õ–∏—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç "–ü–æ–ª—è" –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!existingSheets.includes('–ü–æ–ª—è')) {
            await sheetsService.spreadsheets.batchUpdate({
                spreadsheetId: SHEET_ID,
                requestBody: {
                    requests: [{
                        addSheet: {
                            properties: {
                                title: '–ü–æ–ª—è'
                            }
                        }
                    }]
                }
            });
            success('–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç "–ü–æ–ª—è"');
        } else {
            info('–õ–∏—Å—Ç "–ü–æ–ª—è" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        console.log('\n1Ô∏è‚É£  –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"...');
        await sheetsService.spreadsheets.values.update({
            spreadsheetId: SHEET_ID,
            range: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏!A1',
            valueInputOption: 'RAW',
            requestBody: {
                values: categoriesData
            }
        });
        success(`–ó–∞–ø–∏—Å–∞–Ω–æ ${categoriesData.length - 1} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–∏—Å—Ç "–ü–æ–ª—è"
        console.log('\n2Ô∏è‚É£  –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ü–æ–ª—è"...');
        await sheetsService.spreadsheets.values.update({
            spreadsheetId: SHEET_ID,
            range: '–ü–æ–ª—è!A1',
            valueInputOption: 'RAW',
            requestBody: {
                values: fieldsData
            }
        });
        success(`–ó–∞–ø–∏—Å–∞–Ω–æ ${fieldsData.length - 1} –ø–æ–ª–µ–π`);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
        await sheetsService.spreadsheets.batchUpdate({
            spreadsheetId: SHEET_ID,
            requestBody: {
                requests: [
                    {
                        repeatCell: {
                            range: {
                                sheetId: getSheetId(spreadsheet.data.sheets, '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                                startRowIndex: 0,
                                endRowIndex: 1
                            },
                            cell: {
                                userEnteredFormat: {
                                    textFormat: { bold: true },
                                    backgroundColor: { red: 0.9, green: 0.9, blue: 0.9 }
                                }
                            },
                            fields: 'userEnteredFormat(textFormat,backgroundColor)'
                        }
                    },
                    {
                        repeatCell: {
                            range: {
                                sheetId: getSheetId(spreadsheet.data.sheets, '–ü–æ–ª—è'),
                                startRowIndex: 0,
                                endRowIndex: 1
                            },
                            cell: {
                                userEnteredFormat: {
                                    textFormat: { bold: true },
                                    backgroundColor: { red: 0.9, green: 0.9, blue: 0.9 }
                                }
                            },
                            fields: 'userEnteredFormat(textFormat,backgroundColor)'
                        }
                    }
                ]
            }
        });

        success('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ\n');

        console.log('='.repeat(60));
        console.log(`${colors.green}üéâ GOOGLE –¢–ê–ë–õ–ò–¶–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–û–õ–ù–ï–ù–ê!${colors.reset}`);
        console.log('='.repeat(60) + '\n');

        console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ');
        console.log(`   2. https://docs.google.com/spreadsheets/d/${SHEET_ID}/edit`);
        console.log('   3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ');
        console.log('   4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ: npm run sync-questions\n');

    } catch (err) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', err.message);
        
        if (err.message.includes('permission')) {
            error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
            info('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—à–∞—Ä–µ–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
            info(`Email: ${process.env.GOOGLE_SERVICE_EMAIL}\n`);
        }
        
        process.exit(1);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getSheetId(sheets, title) {
    const sheet = sheets.find(s => s.properties.title === title);
    return sheet ? sheet.properties.sheetId : 0;
}

function getCategoryName(key) {
    const names = {
        frontend: 'Frontend Development',
        backend: 'Backend Development',
        fullstack: 'Fullstack Development',
        devops_infra: 'DevOps / Infrastructure',
        mobile: 'Mobile Development',
        data_ai: 'Data / AI',
        qa_test: 'QA / Testing',
        security: 'Security',
        product: 'Product Management',
        project_management: 'Project Management',
        ux_ui_design: 'UX/UI Design',
        digital_marketing: 'Digital Marketing',
        support_it: 'IT Support',
        crypto: 'Crypto / Blockchain',
        c_level: 'C-Level / Executive',
        igaming: 'iGaming'
    };
    return names[key] || key;
}

function getCategoryDescription(key) {
    const descriptions = {
        frontend: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
        backend: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ API',
        fullstack: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        devops_infra: '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
        mobile: '–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        data_ai: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
        qa_test: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
        security: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        product: '–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
        project_management: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
        ux_ui_design: '–î–∏–∑–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        digital_marketing: '–¶–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
        support_it: 'IT –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        crypto: '–ë–ª–æ–∫—á–µ–π–Ω –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
        c_level: '–¢–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
        igaming: '–û–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ –∏ –±–µ—Ç—Ç–∏–Ω–≥'
    };
    return descriptions[key] || '';
}

function getCategoryIcon(key) {
    const icons = {
        frontend: 'üé®',
        backend: '‚öôÔ∏è',
        fullstack: 'üöÄ',
        devops_infra: 'üîß',
        mobile: 'üì±',
        data_ai: 'üìä',
        qa_test: 'üß™',
        security: 'üîí',
        product: 'üìã',
        project_management: 'üìÖ',
        ux_ui_design: '‚úèÔ∏è',
        digital_marketing: 'üìà',
        support_it: 'üõ†Ô∏è',
        crypto: '‚Çø',
        c_level: 'üëî',
        igaming: 'üé∞'
    };
    return icons[key] || 'üìã';
}

main().catch(err => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
});

