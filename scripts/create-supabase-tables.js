import 'dotenv/config';
import { supabase } from './src/services/supabase.js';

console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Supabase...');

async function createTables() {
  try {
    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    const createTablesSQL = `
-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–π
CREATE TABLE IF NOT EXISTS vacancies (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    emoji VARCHAR(10),
    category VARCHAR(100) NOT NULL,
    link VARCHAR(500),
    level VARCHAR(50),
    salary VARCHAR(100),
    requirements TEXT,
    benefits TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–∫–ª–∏–∫–æ–≤
CREATE TABLE IF NOT EXISTS responses (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id BIGINT NOT NULL,
    username VARCHAR(100),
    first_name VARCHAR(100),
    email VARCHAR(255),
    phone VARCHAR(50),
    file_name VARCHAR(255),
    file_mime VARCHAR(100),
    telegram_link VARCHAR(500),
    status VARCHAR(50) DEFAULT 'new',
    vacancy_id UUID REFERENCES vacancies(id),
    vacancy_title VARCHAR(255),
    text_preview TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–ø–∏—Å–æ–∫
CREATE TABLE IF NOT EXISTS subscriptions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id BIGINT NOT NULL,
    username VARCHAR(100),
    category VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
`;

    console.log('üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ Supabase
    const { data, error } = await supabase.rpc('exec_sql', { sql: createTablesSQL });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
      return false;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
    return false;
  }
}

async function createIndexes() {
  try {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    const createIndexesSQL = `
-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_vacancies_category ON vacancies(category);
CREATE INDEX IF NOT EXISTS idx_vacancies_active ON vacancies(is_active);
CREATE INDEX IF NOT EXISTS idx_responses_user_id ON responses(user_id);
CREATE INDEX IF NOT EXISTS idx_responses_vacancy_id ON responses(vacancy_id);
CREATE INDEX IF NOT EXISTS idx_responses_status ON responses(status);
CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON subscriptions(user_id);
CREATE INDEX IF NOT EXISTS idx_subscriptions_category ON subscriptions(category);
`;

    const { data, error } = await supabase.rpc('exec_sql', { sql: createIndexesSQL });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error);
      return false;
    }
    
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error);
    return false;
  }
}

async function insertTestData() {
  try {
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const testVacancies = [
      {
        title: 'Frontend Developer',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
        emoji: 'üíª',
        category: 'IT/–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        level: 'Middle',
        salary: '150-200k',
        requirements: 'React, Vue, JavaScript',
        benefits: '–£–¥–∞–ª–µ–Ω–∫–∞, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫'
      },
      {
        title: 'Backend Developer',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏',
        emoji: '‚öôÔ∏è',
        category: 'IT/–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        level: 'Senior',
        salary: '200-300k',
        requirements: 'Node.js, Python, PostgreSQL',
        benefits: '–°–ø–æ—Ä—Ç–∑–∞–ª, –º–µ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞'
      },
      {
        title: 'UI/UX Designer',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
        emoji: 'üé®',
        category: '–î–∏–∑–∞–π–Ω',
        level: 'Middle',
        salary: '120-180k',
        requirements: 'Figma, Adobe XD, Sketch',
        benefits: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'
      }
    ];
    
    const { data, error } = await supabase
      .from('vacancies')
      .insert(testVacancies)
      .select();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${data.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase...');
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tablesCreated = await createTables();
    if (!tablesCreated) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã');
      return;
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    const indexesCreated = await createIndexes();
    if (!indexesCreated) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã');
      return;
    }
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testDataAdded = await insertTestData();
    if (!testDataAdded) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return;
    }
    
    console.log('\nüéâ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase:', error);
  }
}

main();
