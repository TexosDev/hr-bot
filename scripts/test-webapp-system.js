/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WebApp —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ë–î, API, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
 */

import { supabase } from '../src/services/supabase/supabase.js';
import { saveUserPreferences } from '../src/services/supabase/supabaseUserPreferences.js';
import dotenv from 'dotenv';

dotenv.config();

const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m'
};

function success(message) {
    console.log(`${colors.green}‚úÖ ${message}${colors.reset}`);
}

function error(message) {
    console.log(`${colors.red}‚ùå ${message}${colors.reset}`);
}

function warning(message) {
    console.log(`${colors.yellow}‚ö†Ô∏è  ${message}${colors.reset}`);
}

function info(message) {
    console.log(`${colors.blue}‚ÑπÔ∏è  ${message}${colors.reset}`);
}

async function checkEnvironment() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');
    
    const required = ['SUPABASE_URL', 'SUPABASE_ANON_KEY'];
    const optional = ['WEBHOOK_PORT', 'TELEGRAM_BOT_TOKEN'];
    
    let allGood = true;
    
    for (const key of required) {
        if (process.env[key]) {
            success(`${key}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
        } else {
            error(`${key}: –ù–ï –ù–ê–°–¢–†–û–ï–ù`);
            allGood = false;
        }
    }
    
    for (const key of optional) {
        if (process.env[key]) {
            success(`${key}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
        } else {
            warning(`${key}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`);
        }
    }
    
    return allGood;
}

async function checkSupabaseConnection() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...\n');
    
    try {
        const { data, error } = await supabase
            .from('user_preferences')
            .select('count')
            .limit(1);
        
        if (error) {
            if (error.message.includes('relation') || error.message.includes('does not exist')) {
                error('–¢–∞–±–ª–∏—Ü–∞ user_preferences –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                info('–í—ã–ø–æ–ª–Ω–∏—Ç–µ: database/simple-new-tables.sql –≤ Supabase SQL Editor');
                return false;
            }
            throw error;
        }
        
        success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç');
        success('–¢–∞–±–ª–∏—Ü–∞ user_preferences —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return true;
        
    } catch (err) {
        error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: ${err.message}`);
        return false;
    }
}

async function checkTableStructure() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã...\n');
    
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const testData = {
            user_id: 999999999,
            username: 'test_user',
            first_name: 'Test',
            preferences: {
                specialization: ['test'],
                technologies: ['test'],
                experience: ['test'],
                work_format: ['test'],
                source: 'system_test'
            },
            is_active: false,
            subscription_type: 'test'
        };
        
        const { data, error } = await supabase
            .from('user_preferences')
            .insert(testData)
            .select()
            .single();
        
        if (error) {
            if (error.message.includes('column')) {
                error(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã: ${error.message}`);
                info('–í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã');
                return false;
            }
            throw error;
        }
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await supabase
            .from('user_preferences')
            .delete()
            .eq('user_id', 999999999);
        
        success('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        success('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞');
        return true;
        
    } catch (err) {
        error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${err.message}`);
        return false;
    }
}

async function testSaveFunction() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...\n');
    
    try {
        const testUser = {
            id: `test_${Date.now()}`,
            username: 'test_webapp_user',
            first_name: 'Test',
            last_name: 'User'
        };
        
        const testPreferences = {
            specialization: ['frontend'],
            technologies: ['React', 'TypeScript'],
            experience: ['2-3 –≥–æ–¥–∞'],
            work_format: ['–£–¥–∞–ª—ë–Ω–∫–∞'],
            location: 'Test Location',
            salary_range: '100000',
            source: 'system_test',
            completed_at: new Date().toISOString()
        };
        
        const result = await saveUserPreferences(testUser.id, testUser, testPreferences);
        
        if (!result) {
            error('–§—É–Ω–∫—Ü–∏—è saveUserPreferences –≤–µ—Ä–Ω—É–ª–∞ null');
            return false;
        }
        
        success('–§—É–Ω–∫—Ü–∏—è saveUserPreferences —Ä–∞–±–æ—Ç–∞–µ—Ç');
        info(`–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å ID: ${result.id}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const { error: deleteError } = await supabase
            .from('user_preferences')
            .delete()
            .eq('user_id', testUser.id);
        
        if (!deleteError) {
            success('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
        }
        
        return true;
        
    } catch (err) {
        error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ${err.message}`);
        return false;
    }
}

async function checkAPIEndpoint() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint...\n');
    
    try {
        const port = process.env.WEBHOOK_PORT || 3001;
        const url = `http://localhost:${port}/health`;
        
        info(`–ü—Ä–æ–≤–µ—Ä—è–µ–º: ${url}`);
        
        const response = await fetch(url);
        
        if (response.ok) {
            success('API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
            success(`Endpoint /health –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
            return true;
        } else {
            warning(`API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
            return false;
        }
        
    } catch (err) {
        warning('API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        info('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev-server');
        return false;
    }
}

async function generateReport(results) {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('='.repeat(60) + '\n');
    
    const checks = [
        { name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', result: results.env },
        { name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase', result: results.supabase },
        { name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã', result: results.structure },
        { name: '–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', result: results.save },
        { name: 'API —Å–µ—Ä–≤–µ—Ä', result: results.api }
    ];
    
    let passedCount = 0;
    
    checks.forEach(check => {
        if (check.result) {
            success(check.name);
            passedCount++;
        } else {
            error(check.name);
        }
    });
    
    console.log('\n' + '='.repeat(60));
    
    const percentage = Math.round((passedCount / checks.length) * 100);
    
    if (percentage === 100) {
        console.log(`${colors.green}üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!${colors.reset}`);
    } else if (percentage >= 60) {
        console.log(`${colors.yellow}‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ ${passedCount}/${checks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫ (${percentage}%)${colors.reset}`);
        console.log(`${colors.yellow}   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º${colors.reset}`);
    } else {
        console.log(`${colors.red}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –ü—Ä–æ–π–¥–µ–Ω–æ ${passedCount}/${checks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫ (${percentage}%)${colors.reset}`);
        console.log(`${colors.red}   –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ${colors.reset}`);
    }
    
    console.log('='.repeat(60) + '\n');
    
    if (percentage < 100) {
        console.log('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: webapp/SETUP.md\n');
    }
}

async function main() {
    console.log('\n' + '='.repeat(60));
    console.log('üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò WEBAPP –°–ò–°–¢–ï–ú–´');
    console.log('='.repeat(60));
    
    const results = {
        env: await checkEnvironment(),
        supabase: await checkSupabaseConnection(),
        structure: false,
        save: false,
        api: await checkAPIEndpoint()
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if (results.supabase) {
        results.structure = await checkTableStructure();
        results.save = await testSaveFunction();
    }
    
    await generateReport(results);
    
    process.exit(results.env && results.supabase && results.structure && results.save ? 0 : 1);
}

main().catch(err => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
});

