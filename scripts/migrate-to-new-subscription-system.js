import 'dotenv/config';
import { supabase } from '../src/services/supabase/supabase.js';
import { fullSyncWithTags } from '../src/services/supabase/syncSheetsSupabaseWithTags.js';

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–ø–∏—Å–æ–∫ —Å —Ç–µ–≥–∞–º–∏
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID, DRY, KISS
 */

console.log('üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–ø–∏—Å–æ–∫ —Å —Ç–µ–≥–∞–º–∏...');

async function migrateDatabase() {
  try {
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL —Å—Ö–µ–º—É
    const fs = await import('fs');
    const path = await import('path');
    const { fileURLToPath } = await import('url');
    
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);
    
    const schemaPath = path.join(__dirname, '../database/new-subscription-schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL
    const { error } = await supabase.rpc('exec_sql', { sql: schema });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
      return false;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

async function migrateExistingData() {
  try {
    console.log('üìã –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const { data: oldSubscriptions, error: fetchError } = await supabase
      .from('subscriptions')
      .select('*');
    
    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', fetchError);
      return false;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${oldSubscriptions.length} —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫`);
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    for (const subscription of oldSubscriptions) {
      try {
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const preferences = {
          directions: [subscription.category],
          technologies: [],
          experience: ['–õ—é–±–æ–π'],
          salary: null,
          work_conditions: ['–õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç'],
          location: '–†–∞—Å—Å–º–æ—Ç—Ä—é –≤–∞—Ä–∏–∞–Ω—Ç—ã',
          company_size: ['–ù–µ –≤–∞–∂–Ω–æ'],
          migrated_from: 'old_system',
          migrated_at: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        const { error: insertError } = await supabase
          .from('user_preferences')
          .upsert({
            user_id: subscription.user_id,
            username: subscription.username,
            first_name: subscription.username, // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ –∏–º—è
            preferences: preferences,
            is_active: true,
            subscription_type: 'migrated'
          }, {
            onConflict: 'user_id',
            ignoreDuplicates: false
          });
        
        if (insertError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscription.user_id}:`, insertError);
        } else {
          console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscription.user_id}`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
      }
    }
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

async function testNewSystem() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const syncResult = await fullSyncWithTags();
    
    if (syncResult.success) {
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${syncResult.vacancies.synced} –Ω–æ–≤—ã—Ö, ${syncResult.vacancies.updated} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncResult.error);
      return false;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const { data: subscribers, error: subscribersError } = await supabase
      .from('user_preferences')
      .select('*')
      .eq('is_active', true)
      .limit(5);
    
    if (subscribersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', subscribersError);
      return false;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${subscribers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return false;
  }
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–ø–∏—Å–æ–∫...\n');
    
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üìä –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    const dbResult = await migrateDatabase();
    if (!dbResult) {
      console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü');
      return;
    }
    
    // –®–∞–≥ 2: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìã –®–∞–≥ 2: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const dataResult = await migrateExistingData();
    if (!dataResult) {
      console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    // –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüß™ –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    const testResult = await testNewSystem();
    if (!testResult) {
      console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:');
    console.log('‚Ä¢ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å —Ç–µ–≥–∞–º–∏');
    console.log('‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    console.log('‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π');
    console.log('‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets');
    
    console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ—Ç–µ –Ω–∞ –Ω–æ–≤—ã–µ');
    console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–æ—Å–æ–≤');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–≥–∏ –≤ Google Sheets');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  }
}

main();
