/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ .env —Ñ–∞–π–ª–∞
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m'
};

function success(message) {
    console.log(`${colors.green}‚úÖ ${message}${colors.reset}`);
}

function error(message) {
    console.log(`${colors.red}‚ùå ${message}${colors.reset}`);
}

function warning(message) {
    console.log(`${colors.yellow}‚ö†Ô∏è  ${message}${colors.reset}`);
}

function info(message) {
    console.log(`${colors.blue}‚ÑπÔ∏è  ${message}${colors.reset}`);
}

console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
const envPath = path.join(rootDir, '.env');
const envExamplePath = path.join(rootDir, '.env.example');

if (!fs.existsSync(envPath)) {
    error('.env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    console.log(`\nüìç –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: ${envPath}\n`);
    
    if (fs.existsSync(envExamplePath)) {
        info('–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª .env.example');
        console.log('\nüí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª:');
        console.log('   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env');
        console.log('   2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n');
    } else {
        console.log('\nüí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:');
        console.log(`
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your_anon_key_here
WEBHOOK_PORT=3001
NODE_ENV=development
        `);
    }
    process.exit(1);
}

success('.env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
console.log(`üìç –ü—É—Ç—å: ${envPath}\n`);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const result = dotenv.config({ path: envPath });

if (result.error) {
    error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: ${result.error.message}`);
    process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const requiredVars = {
    'SUPABASE_URL': {
        required: true,
        example: 'https://your-project.supabase.co',
        description: 'URL –≤–∞—à–µ–≥–æ Supabase –ø—Ä–æ–µ–∫—Ç–∞'
    },
    'SUPABASE_ANON_KEY': {
        required: true,
        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
        description: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª—é—á Supabase (anon/public key)'
    }
};

const optionalVars = {
    'WEBHOOK_PORT': {
        required: false,
        example: '3001',
        description: '–ü–æ—Ä—Ç –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞',
        default: '3001'
    },
    'NODE_ENV': {
        required: false,
        example: 'development',
        description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ (development/production)',
        default: 'development'
    },
    'TELEGRAM_BOT_TOKEN': {
        required: false,
        example: '1234567890:ABC...',
        description: '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞'
    }
};

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:\n');

let hasErrors = false;
let hasWarnings = false;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
for (const [key, config] of Object.entries(requiredVars)) {
    const value = process.env[key];
    
    if (!value || value.trim() === '') {
        error(`${key}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
        console.log(`   ${colors.blue}–û–ø–∏—Å–∞–Ω–∏–µ: ${config.description}${colors.reset}`);
        console.log(`   ${colors.blue}–ü—Ä–∏–º–µ—Ä: ${config.example}${colors.reset}\n`);
        hasErrors = true;
    } else if (value.includes('your-project') || value.includes('your_') || value === config.example) {
        warning(`${key}: —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –∑–Ω–∞—á–µ–Ω–∏–µ`);
        console.log(`   ${colors.yellow}–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Supabase Dashboard${colors.reset}\n`);
        hasErrors = true;
    } else {
        success(`${key}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const preview = value.length > 40 
            ? `${value.substring(0, 20)}...${value.substring(value.length - 10)}`
            : value;
        console.log(`   ${colors.blue}–ó–Ω–∞—á–µ–Ω–∏–µ: ${preview}${colors.reset}\n`);
    }
}

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
for (const [key, config] of Object.entries(optionalVars)) {
    const value = process.env[key];
    
    if (!value || value.trim() === '') {
        warning(`${key}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        console.log(`   ${colors.blue}–û–ø–∏—Å–∞–Ω–∏–µ: ${config.description}${colors.reset}`);
        if (config.default) {
            console.log(`   ${colors.blue}–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${config.default}${colors.reset}\n`);
        } else {
            console.log(`   ${colors.blue}–ü—Ä–∏–º–µ—Ä: ${config.example}${colors.reset}\n`);
        }
        hasWarnings = true;
    } else {
        success(`${key}: ${value}`);
    }
}

console.log('\n' + '='.repeat(60));

if (hasErrors) {
    console.log(`${colors.red}\n‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å .env —Ñ–∞–π–ª–æ–º!${colors.reset}`);
    console.log(`\nüí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:`);
    console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://app.supabase.com`);
    console.log(`   2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç`);
    console.log(`   3. Settings ‚Üí API`);
    console.log(`   4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ:`);
    console.log(`      - Project URL ‚Üí SUPABASE_URL`);
    console.log(`      - anon/public key ‚Üí SUPABASE_ANON_KEY\n`);
    process.exit(1);
} else if (hasWarnings) {
    console.log(`${colors.yellow}\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${colors.reset}`);
    console.log(`${colors.green}‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!${colors.reset}\n`);
} else {
    console.log(`${colors.green}\n‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!${colors.reset}\n`);
}

console.log('='.repeat(60) + '\n');

