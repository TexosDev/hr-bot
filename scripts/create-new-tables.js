import 'dotenv/config';
import { supabase } from '../src/services/supabase/supabase.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å —Ç–µ–≥–∞–º–∏...');

async function createTables() {
  try {
    // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, '../database/new-subscription-schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    console.log('üìã SQL —Å—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = schema
      .split(';')
      .map(q => q.trim())
      .filter(q => q && !q.startsWith('--'));
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${queries.length} SQL –∑–∞–ø—Ä–æ—Å–æ–≤`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
    for (let i = 0; i < queries.length; i++) {
      const query = queries[i];
      if (query) {
        try {
          console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ${i + 1}...`);
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Supabase
          const { error } = await supabase.rpc('exec_sql', { sql: query });
          
          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i + 1}:`, error.message);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          } else {
            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
          }
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ ${i + 1}:`, err.message);
        }
      }
    }
    
    console.log('üéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    const tables = [
      'vacancies',
      'user_preferences', 
      'notifications',
      'tags',
      'vacancy_tags',
      'user_tags'
    ];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: —Å–æ–∑–¥–∞–Ω–∞`);
        }
      } catch (err) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${err.message}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

createTables();
