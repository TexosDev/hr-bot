#!/usr/bin/env node

/**
 * –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ Supabase
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –∏ –≤—ã–¥–∞–µ—Ç –æ—Ç—á–µ—Ç
 */

import { supabase } from '../src/services/supabase/supabase.js';
import dotenv from 'dotenv';

dotenv.config();

const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    cyan: '\x1b[36m',
    reset: '\x1b[0m'
};

function success(message) {
    console.log(`${colors.green}‚úÖ ${message}${colors.reset}`);
}

function error(message) {
    console.log(`${colors.red}‚ùå ${message}${colors.reset}`);
}

function warning(message) {
    console.log(`${colors.yellow}‚ö†Ô∏è  ${message}${colors.reset}`);
}

function info(message) {
    console.log(`${colors.blue}‚ÑπÔ∏è  ${message}${colors.reset}`);
}

function title(message) {
    console.log(`${colors.cyan}${message}${colors.reset}`);
}

// –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∞–±–ª–∏—Ü
const EXPECTED_TABLES = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    'vacancies': {
        description: '–í–∞–∫–∞–Ω—Å–∏–∏',
        required: true,
        columns: ['id', 'title', 'category', 'is_active']
    },
    'responses': {
        description: '–û—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏',
        required: true,
        columns: ['id', 'user_id', 'vacancy_id']
    },
    'subscriptions': {
        description: '–ü–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)',
        required: false,
        columns: ['id', 'user_id', 'category']
    },
    
    // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    'user_preferences': {
        description: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)',
        required: true,
        columns: ['id', 'user_id', 'preferences', 'is_active']
    },
    'notifications': {
        description: '–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        required: true,
        columns: ['id', 'user_id', 'vacancy_id', 'status']
    },
    
    // –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤
    'tags': {
        description: '–¢–µ–≥–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –∏ –Ω–∞–≤—ã–∫–æ–≤',
        required: true,
        columns: ['id', 'name', 'category', 'is_active']
    },
    'vacancy_tags': {
        description: '–°–≤—è–∑—å –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–µ–≥–∞–º–∏',
        required: true,
        columns: ['id', 'vacancy_id', 'tag_name']
    },
    'user_tags': {
        description: '–°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–∞–º–∏',
        required: true,
        columns: ['id', 'user_id', 'tag_name']
    },
    
    // –°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    'survey_categories': {
        description: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–ø—Ä–æ—Å–∞',
        required: true,
        columns: ['id', 'category_key', 'name', 'is_active']
    },
    'survey_fields': {
        description: '–ü–æ–ª—è —Ñ–æ—Ä–º—ã –æ–ø—Ä–æ—Å–∞',
        required: true,
        columns: ['id', 'category_key', 'field_key', 'field_type', 'label']
    }
};

async function checkTable(tableName, config) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const { data, error, count } = await supabase
            .from(tableName)
            .select('*', { count: 'exact', head: true });

        if (error) {
            if (error.message.includes('does not exist') || error.code === 'PGRST205') {
                if (config.required) {
                    error(`${tableName}: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)`);
                } else {
                    warning(`${tableName}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)`);
                }
                return { exists: false, required: config.required };
            }
            throw error;
        }

        success(`${tableName}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (${count || 0} –∑–∞–ø–∏—Å–µ–π)`);
        info(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${config.description}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        const { data: sample } = await supabase
            .from(tableName)
            .select('*')
            .limit(1);

        if (sample && sample.length > 0) {
            const columns = Object.keys(sample[0]);
            const missingColumns = config.columns.filter(col => !columns.includes(col));
            
            if (missingColumns.length > 0) {
                warning(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: ${missingColumns.join(', ')}`);
            }
        }

        return { exists: true, count: count || 0, required: config.required };

    } catch (err) {
        error(`${tableName}: –û–®–ò–ë–ö–ê - ${err.message}`);
        return { exists: false, error: err.message, required: config.required };
    }
}

async function generateDatabaseReport() {
    console.log('\n' + '='.repeat(70));
    console.log('üìä –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• SUPABASE');
    console.log('='.repeat(70) + '\n');

    const results = {};
    let totalTables = 0;
    let existingTables = 0;
    let missingRequired = 0;
    let totalRecords = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const [tableName, config] of Object.entries(EXPECTED_TABLES)) {
        totalTables++;
        const result = await checkTable(tableName, config);
        results[tableName] = result;

        if (result.exists) {
            existingTables++;
            totalRecords += result.count || 0;
        } else if (result.required) {
            missingRequired++;
        }

        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('='.repeat(70));
    title('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢\n');
    console.log('='.repeat(70) + '\n');

    console.log(`üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${totalTables}`);
    console.log(`‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingTables}`);
    console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${totalTables - existingTables}`);
    console.log(`üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${missingRequired}`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}\n`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
    console.log('üìÅ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é:\n');

    console.log('üè¢ –û–°–ù–û–í–ù–´–ï –¢–ê–ë–õ–ò–¶–´:');
    ['vacancies', 'responses', 'subscriptions'].forEach(table => {
        const res = results[table];
        const status = res?.exists ? `‚úÖ ${res.count} –∑–∞–ø–∏—Å–µ–π` : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞';
        console.log(`   ‚Ä¢ ${table}: ${status}`);
    });

    console.log('\nüë• –°–ò–°–¢–ï–ú–ê –ü–û–î–ü–ò–°–û–ö:');
    ['user_preferences', 'notifications'].forEach(table => {
        const res = results[table];
        const status = res?.exists ? `‚úÖ ${res.count} –∑–∞–ø–∏—Å–µ–π` : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞';
        console.log(`   ‚Ä¢ ${table}: ${status}`);
    });

    console.log('\nüè∑Ô∏è  –°–ò–°–¢–ï–ú–ê –¢–ï–ì–û–í:');
    ['tags', 'vacancy_tags', 'user_tags'].forEach(table => {
        const res = results[table];
        const status = res?.exists ? `‚úÖ ${res.count} –∑–∞–ø–∏—Å–µ–π` : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞';
        console.log(`   ‚Ä¢ ${table}: ${status}`);
    });

    console.log('\nüìã –°–ò–°–¢–ï–ú–ê –í–û–ü–†–û–°–û–í:');
    ['survey_categories', 'survey_fields'].forEach(table => {
        const res = results[table];
        const status = res?.exists ? `‚úÖ ${res.count} –∑–∞–ø–∏—Å–µ–π` : '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞';
        console.log(`   ‚Ä¢ ${table}: ${status}`);
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n' + '='.repeat(70));
    title('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n');
    console.log('='.repeat(70) + '\n');

    if (missingRequired > 0) {
        error(`–ö—Ä–∏—Ç–∏—á–Ω–æ: ${missingRequired} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!\n`);

        console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:\n');

        if (!results['vacancies']?.exists || !results['responses']?.exists || !results['subscriptions']?.exists) {
            console.log('1Ô∏è‚É£  –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
            console.log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: database/supabase-schema.sql\n');
        }

        if (!results['user_preferences']?.exists || !results['notifications']?.exists || !results['tags']?.exists) {
            console.log('2Ô∏è‚É£  –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ç–µ–≥–æ–≤:');
            console.log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: database/simple-new-tables.sql\n');
        }

        if (!results['survey_categories']?.exists || !results['survey_fields']?.exists) {
            console.log('3Ô∏è‚É£  –°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:');
            console.log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: database/survey-questions-schema.sql\n');
        }

        console.log('üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: FIX_TABLES_ERROR.md\n');

    } else if (existingTables === totalTables) {
        success('–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üéâ\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if (results['vacancies']?.count === 0) {
            warning('–¢–∞–±–ª–∏—Ü–∞ vacancies –ø—É—Å—Ç–∞—è');
            info('   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏–∏: npm run sync\n');
        }

        if (results['tags']?.count === 0) {
            warning('–¢–∞–±–ª–∏—Ü–∞ tags –ø—É—Å—Ç–∞—è');
            info('   –¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ simple-new-tables.sql\n');
        }

        if (results['survey_categories']?.count === 0) {
            warning('–¢–∞–±–ª–∏—Ü–∞ survey_categories –ø—É—Å—Ç–∞—è');
            info('   –ó–∞–ø–æ–ª–Ω–∏—Ç–µ Google –¢–∞–±–ª–∏—Ü—É: npm run populate-questions');
            info('   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ: npm run sync-questions\n');
        }

        if (results['user_preferences']?.count === 0) {
            info('–¢–∞–±–ª–∏—Ü–∞ user_preferences –ø—É—Å—Ç–∞—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
            info('   –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å WebApp —Ñ–æ—Ä–º—É\n');
        }

    } else {
        warning('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n');

        const missing = Object.entries(results)
            .filter(([name, res]) => !res.exists)
            .map(([name]) => name);

        if (missing.length > 0) {
            console.log('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
            missing.forEach(name => console.log(`   ‚Ä¢ ${name}`));
            console.log('');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
    console.log('='.repeat(70));
    title('\nüîó –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô\n');
    console.log('='.repeat(70) + '\n');

    if (results['vacancies']?.exists && results['responses']?.exists) {
        success('responses ‚Üí vacancies: OK');
    }

    if (results['vacancies']?.exists && results['vacancy_tags']?.exists) {
        success('vacancy_tags ‚Üí vacancies: OK');
    }

    if (results['vacancies']?.exists && results['notifications']?.exists) {
        success('notifications ‚Üí vacancies: OK');
    }

    if (results['user_preferences']?.exists && results['user_tags']?.exists) {
        success('user_tags ‚Üí users: OK');
    }

    console.log('\n' + '='.repeat(70));

    const percentage = Math.round((existingTables / totalTables) * 100);

    if (percentage === 100) {
        console.log(`\n${colors.green}üéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –í –ò–î–ï–ê–õ–¨–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò (100%)${colors.reset}\n`);
    } else if (percentage >= 70) {
        console.log(`\n${colors.yellow}‚ö†Ô∏è  –ë–ê–ó–ê –î–ê–ù–ù–´–• –ß–ê–°–¢–ò–ß–ù–û –ù–ê–°–¢–†–û–ï–ù–ê (${percentage}%)${colors.reset}\n`);
    } else {
        console.log(`\n${colors.red}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (${percentage}%)${colors.reset}\n`);
    }

    console.log('='.repeat(70) + '\n');

    return { percentage, missingRequired };
}

async function main() {
    const result = await generateDatabaseReport();

    if (result.missingRequired > 0) {
        process.exit(1);
    } else {
        process.exit(0);
    }
}

main().catch(err => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
});

